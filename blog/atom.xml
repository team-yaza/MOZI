<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://team-yaza.github.io/blog</id>
    <title>MOZI Blog</title>
    <updated>2022-10-08T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://team-yaza.github.io/blog"/>
    <subtitle>MOZI Blog</subtitle>
    <icon>https://team-yaza.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Drag And Drop]]></title>
        <id>dnd</id>
        <link href="https://team-yaza.github.io/blog/dnd"/>
        <updated>2022-10-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[MOZI에서는 할 일을 드래그 앤 드롭을 통해 수정할 수 있어야한다.(예를 들어 할 일 복원) 어떻게 보면 스토리에서 우선순위는 아니였기에 뒤로 미루다가 벨로그에서 좋은 글을 발견하고 글에 나와있는 프로젝트를 그대로 구현해보면서 배우기로 했다.]]></summary>
        <content type="html"><![CDATA[<p>MOZI에서는 할 일을 드래그 앤 드롭을 통해 수정할 수 있어야한다.(예를 들어 할 일 복원) 어떻게 보면 스토리에서 우선순위는 아니였기에 뒤로 미루다가 <a href="https://velog.io/@bepyan/Drag-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%BD%80%EA%B0%9C%EA%B8%B0" target="_blank" rel="noopener noreferrer">벨로그에서 좋은 글</a>을 발견하고 글에 나와있는 프로젝트를 그대로 구현해보면서 배우기로 했다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="drag-event">Drag Event<a class="hash-link" href="#drag-event" title="Direct link to heading">​</a></h2><p>마우스의 움직임을 바탕으로 element의 위치를 이동시켜야하는 드래그앤 드롭은 마우스 관련 이벤트를 잘 이해해야 한다.</p><ul><li><code>mousedown</code>(마우스 클릭 이벤트)</li><li><code>mousemove</code>(마우스 이동 이벤트)</li><li><code>mouseup</code>(마우스 클릭 해제 이벤트)</li></ul><p><code>MouseEvent</code>가 가진 속성을 알아보자.</p><ul><li><code>x, clientX</code>: in local (DOM Content) coordinates. 이벤트가 발생되는 element 기준으로 위치를 산정한다.</li><li><code>pageX</code>: relative to the whole document. page document 기준으로 위치를 산정한다.</li><li><code>sreenX</code>: in global (screen) coordinates. 더 나아가 듀얼 모니터의 주 모니터를 기준으로 위치를 산정한다.</li></ul><p>우선 screenX를 사용해 마우스의 현재 위치를 나타내보자.</p><p>Boundary라는 컴포넌트를 만들어 마우스 이벤트를 등록한뒤에 그 내부에서 마우스 이동을 해보자.</p><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&lt;</span><span class="token maybe-class-name">Boundary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  onMouseDown</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">mouseMoveHandler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">e</span><span class="token operator">:</span><span class="token plain"> </span><span class="token maybe-class-name">MouseEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">mouse move x:</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">e</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string interpolation">screenX</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)"> y:</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">e</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string interpolation">screenY</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token function" style="color:rgb(80, 250, 123)">setPosition</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> x</span><span class="token operator">:</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">screenX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token operator">:</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">screenY</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">mouseUpHandler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">e</span><span class="token operator">:</span><span class="token plain"> </span><span class="token maybe-class-name">MouseEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">warn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">&gt;&gt;&gt;&gt; mouse up x:</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">e</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string interpolation">screenX</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)"> y:</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">e</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string interpolation">screenY</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">removeEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"mousemove"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mouseMoveHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"mousemove"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mouseMoveHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"mouseup"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mouseUpHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> once</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">/</span><span class="token operator">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div style="width:640px;height:360px"></div><p>이제 마우스의 움직임을 기반으로 이를 활용하여 element를 drag해서 위치를 움직여보자.</p><ol><li>element의 position 상태를 정의.</li><li>클릭(<code>mousedown</code>)이벤트를 발생시의 커서위치를 기준으로, 이동 (<code>mousedown</code>)이벤트에서 상대적으로 이동한 거리(<code>deltaX</code>, <code>deltaY</code>)를 계산한다.</li><li>position 상태를 변경하여 element를 움직이게한다.</li></ol><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// 1️⃣</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setPosition</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  x</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  y</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    &lt;div</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      style=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> transform</span><span class="token operator">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">translateX(</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">x</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)">px) translateY(</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">y</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)">px)</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      onMouseDown=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">clickEvent</span><span class="token operator">:</span><span class="token plain"> </span><span class="token maybe-class-name">React</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access maybe-class-name">MouseEvent</span><span class="token operator">&lt;</span><span class="token maybe-class-name">Element</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token maybe-class-name">MouseEvent</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">mouseMoveHandler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">moveEvent</span><span class="token operator">:</span><span class="token plain"> </span><span class="token maybe-class-name">MouseEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token comment" style="color:rgb(98, 114, 164)">// 2️⃣</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaX </span><span class="token operator">=</span><span class="token plain"> moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">screenX</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> clickEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">screenX</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaY </span><span class="token operator">=</span><span class="token plain"> moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">screenY</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> clickEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">screenY</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token comment" style="color:rgb(98, 114, 164)">// 3️⃣</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token function" style="color:rgb(80, 250, 123)">setPosition</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            x</span><span class="token operator">:</span><span class="token plain"> x </span><span class="token operator">+</span><span class="token plain"> deltaX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            y</span><span class="token operator">:</span><span class="token plain"> y </span><span class="token operator">+</span><span class="token plain"> deltaY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">mouseUpHandler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">removeEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"mousemove"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mouseMoveHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"mousemove"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mouseMoveHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"mouseup"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mouseUpHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> once</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    /&gt;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div style="width:640px;height:360px"></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="drag-boundary">Drag Boundary<a class="hash-link" href="#drag-boundary" title="Direct link to heading">​</a></h2><p>drag를 할 때 특정 영역(boundary)를 벗어나지 않길 원할 수 있다.<br>
<!-- -->위의 예제에서 <code>mousemove</code>이벤트에서 특정 범위를 벗어나지 않도록 제한하면 된다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/bepyan/post/ac92e9bf-fce7-48b5-8a83-acc04b183878/image.png" class="img_ev3q"></p><p><code>getBoundingClientRect</code>를 활용하여 element의 정보를 얻을 수 있다.</p><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> boundary </span><span class="token operator">=</span><span class="token plain"> boundaryRef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">getBoundingClientRect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> box </span><span class="token operator">=</span><span class="token plain"> boxRef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">getBoundingClientRect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// x, y, width, height</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이 정보를 이용해 drag할 수 있는 경계(minx, maxx, miny, maxy)를 계산하면 된다. element의 범위를 계산하는 로직은 다음과 같다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/bepyan/post/26ef16ac-fa25-4c96-b2f7-da4bf5759f0c/image.png" class="img_ev3q">
<img loading="lazy" src="https://velog.velcdn.com/images/bepyan/post/332fa024-b6ec-46fe-9b0e-40527d11e101/image.png" class="img_ev3q"></p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">inrange</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">v</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> min</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> max</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">v </span><span class="token operator">&lt;</span><span class="token plain"> min</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> min</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">v </span><span class="token operator">&gt;</span><span class="token plain"> max</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> max</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> v</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">BOUNDARY_MARGIN</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">12</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaX </span><span class="token operator">=</span><span class="token plain"> moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">screenX </span><span class="token operator">-</span><span class="token plain"> clickEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">screenX</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaY </span><span class="token operator">=</span><span class="token plain"> moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">screenY </span><span class="token operator">-</span><span class="token plain"> clickEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">screenY</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">setPosition</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  x</span><span class="token operator">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">inrange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    x </span><span class="token operator">+</span><span class="token plain"> deltaX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Math</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">floor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">-</span><span class="token plain">boundary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">width </span><span class="token operator">/</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> box</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">width </span><span class="token operator">/</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">BOUNDARY_MARGIN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Math</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">floor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">boundary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">width </span><span class="token operator">/</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> box</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">width </span><span class="token operator">/</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">BOUNDARY_MARGIN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  y</span><span class="token operator">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">inrange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    y </span><span class="token operator">+</span><span class="token plain"> deltaY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Math</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">floor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">-</span><span class="token plain">boundary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">height </span><span class="token operator">/</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> box</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">height </span><span class="token operator">/</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">BOUNDARY_MARGIN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Math</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">floor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">boundary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">height </span><span class="token operator">/</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> box</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">height </span><span class="token operator">/</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">BOUNDARY_MARGIN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div style="width:640px;height:360px"></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="touch-event">Touch Event<a class="hash-link" href="#touch-event" title="Direct link to heading">​</a></h2><p>이전 Drag이벤트에서 만든 Drag로직은 모바일에서 동작하지 않는다는 단점이 있다. 모바일 기기에서는 TouchEvent가 발생된다.</p><ul><li><code>mousedown</code> -- <code>touchdown</code></li><li><code>mousemove</code> -- <code>touchmove</code></li><li><code>mouseup</code> -- <code>touchend</code></li></ul><p><code>TouchEvent</code>의 속성</p><ul><li><code>touches:</code> 모든 접촉점의 터치 리스트</li><li><code>targetTouches</code>: 현재 이벤트 타겟에서 시작된 터치 리스트</li><li><code>changedTouches</code> : 이전 이벤트에 할당된 모든 접촉점의 터치 리스트</li></ul><p>터치 스크린 특성상 여러 터치 이벤트가 동시에 실행될 수 있어서 리스트를 반환한다. 일반저긍로 첫 Touch 이벤트를 사용하면 될 것이다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/bepyan/post/8bdbb9ea-c3c1-4182-8e51-979db4cfe9d9/image.png" class="img_ev3q"></p><p>움직일 때는 touches<!-- -->[0]<!-- -->, 손을 땠을 때는 changedTouches<!-- -->[0]<!-- -->을 사용하면된다.</p><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&lt;</span><span class="token maybe-class-name">Boundary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  onTouchStart</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">touchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">touchMoveHandler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">moveEvent</span><span class="token operator">:</span><span class="token plain"> </span><span class="token maybe-class-name">TouchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token function" style="color:rgb(80, 250, 123)">setPosition</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        x</span><span class="token operator">:</span><span class="token plain"> moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">touches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">pageX</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> touchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">touches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">pageX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        y</span><span class="token operator">:</span><span class="token plain"> moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">touches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">pageY</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> touchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">touches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">pageY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">touchEndHandler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">removeEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"touchmove"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> touchMoveHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"touchmove"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> touchMoveHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"touchend"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> touchEndHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> once</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">/</span><span class="token operator">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>그런데 문제가 있다. drag, touch이벤트를 모두 등록하기는 너무 귀찮다. 아래와 같은 util 함수를 만들어서 터치스크린인지 판별할 수 있다.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> isTouchScreen </span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> window </span><span class="token operator">!==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"undefined"</span><span class="token plain"> </span><span class="token operator">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  window</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">matchMedia</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"(hover: none) and (pointer: coarse)"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">matches</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이제 drag 이벤트의 최종코드를 보자.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">registDragEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  onDragChange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  onDragEnd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  stopPropagation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  onDragChange</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">deltaX</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> deltaY</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  onDragEnd</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">deltaX</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> deltaY</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  stopPropagation</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">boolean</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">isTouchScreen</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">onTouchStart</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">touchEvent</span><span class="token operator">:</span><span class="token plain"> React</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">TouchEvent</span><span class="token operator">&lt;</span><span class="token plain">HTMLDivElement</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">stopPropagation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> touchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">stopPropagation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">touchMoveHandler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">moveEvent</span><span class="token operator">:</span><span class="token plain"> TouchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaX </span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">touches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageX </span><span class="token operator">-</span><span class="token plain"> touchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">touches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageX</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaY </span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">touches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageY </span><span class="token operator">-</span><span class="token plain"> touchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">touches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageY</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          onDragChange</span><span class="token operator">?.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">deltaX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> deltaY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">touchEndHandler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">moveEvent</span><span class="token operator">:</span><span class="token plain"> TouchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaX </span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">changedTouches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageX </span><span class="token operator">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            touchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">changedTouches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageX</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaY </span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">changedTouches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageY </span><span class="token operator">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            touchEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">changedTouches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageY</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          onDragEnd</span><span class="token operator">?.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">deltaX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> deltaY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">removeEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"touchmove"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> touchMoveHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"touchmove"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> touchMoveHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"touchend"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> touchEndHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> once</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">onMouseDown</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">clickEvent</span><span class="token operator">:</span><span class="token plain"> React</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">MouseEvent</span><span class="token operator">&lt;</span><span class="token plain">Element</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> MouseEvent</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">stopPropagation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> clickEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">stopPropagation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">mouseMoveHandler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">moveEvent</span><span class="token operator">:</span><span class="token plain"> MouseEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaX </span><span class="token operator">=</span><span class="token plain"> moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageX </span><span class="token operator">-</span><span class="token plain"> clickEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageX</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaY </span><span class="token operator">=</span><span class="token plain"> moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageY </span><span class="token operator">-</span><span class="token plain"> clickEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageY</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        onDragChange</span><span class="token operator">?.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">deltaX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> deltaY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">mouseUpHandler</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">moveEvent</span><span class="token operator">:</span><span class="token plain"> MouseEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaX </span><span class="token operator">=</span><span class="token plain"> moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageX </span><span class="token operator">-</span><span class="token plain"> clickEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageX</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> deltaY </span><span class="token operator">=</span><span class="token plain"> moveEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageY </span><span class="token operator">-</span><span class="token plain"> clickEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pageY</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        onDragEnd</span><span class="token operator">?.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">deltaX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> deltaY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">removeEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"mousemove"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mouseMoveHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"mousemove"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mouseMoveHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"mouseup"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> mouseUpHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> once</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>이현진</name>
            <uri>https://github.com/hyunjinee</uri>
        </author>
        <category label="React" term="React"/>
        <category label="MOZI" term="MOZI"/>
        <category label="DND" term="DND"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[📅 캘린더 만들기]]></title>
        <id>mozi-calendar</id>
        <link href="https://team-yaza.github.io/blog/mozi-calendar"/>
        <updated>2022-10-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[MOZI에는 Upcoming이라는 탭이 존재합니다. 이 탭에서는 다가오는 할 일을 볼 수 있고 할 일을 등록할 수 있습니다.]]></summary>
        <content type="html"><![CDATA[<p>MOZI에는 <code>Upcoming</code>이라는 탭이 존재합니다. 이 탭에서는 다가오는 할 일을 볼 수 있고 할 일을 등록할 수 있습니다.</p><p><img loading="lazy" src="https://user-images.githubusercontent.com/63354527/193635704-98c24679-e5b4-44df-8a35-6f7726ff9122.png" alt="3_Upcoming" class="img_ev3q"></p><p>이 글은 위 화면과 같이 달력을 만들어보면서 겪은 경험을 기록한 글입니다.</p><p>캘린더를 만든다고 하니 <a href="https://github.com/gv0413" target="_blank" rel="noopener noreferrer">목민주 멘토님</a>이 <a href="https://youtu.be/CSWc0HYjxEs" target="_blank" rel="noopener noreferrer">영상을 한개 추천</a>해주셔서 봤습니다. 영상을 보니 날짜를 <code>Date</code> 객체로 직접 다루는 것은 헷갈릴만한 부분이 많았습니다.</p><p>JavaScript에서 날짜를 다루는 것은 까다롭기 때문에 <code>moment</code>, <code>dayjs</code>, <code>date-fns</code>와 같은 라이브러리를 사용하곤 합니다. 저는 처음부터 라이브러리를 사용하고 싶지는 않았습니다.(Date 객체를 많이 다루어보지 않았기 때문에 Date 객체를 다루어 보고 싶었음 + React 없이 vanilla로 캘린더 개발)</p><p>저는 <a href="https://github.com/team-yaza/mozi-calendar" target="_blank" rel="noopener noreferrer">mozi-calendar</a>라는 레포를 만들고 Date 객체를 사용해서 캘린더를 만드는 것을 연습해보기로 합니다. 저는 일단 코드를 쳐보고 이해가 안가면 검색해서 문서를 보고 이해하는 방식을 좋아하기 때문에 먼저 Date 객체를 마음대로 다루어봤습니다.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> date </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Tue Oct 04 2022 02:26:17 GMT+0900 (한국 표준시)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>먼저 <code>new Date()</code>를 콘솔에 찍어보니 위와 같이 나왔습니다. 뭔가 오늘 날짜와 시간이 나오는 것 같습니다. 일단 달력에 오늘의 년도, 월, 일을 표시해야하므로 date에서부터 가져와보겠습니다.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getFullYear</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 2022</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getMonth</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 9</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getDate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 4</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이렇게 년, 월, 일을 가져와봤습니다. 재밌는 점은 년하고 일은 괜찮은데 월은 인덱스가 0부터 시작한다고 합니다. 0은 1월, 1은 2월 ... 그러니까 9는 10월입니다. 오늘이 2022년 10월 4일이므로 맞습니다.</p><p>그럼 이제 조금 나아가서 이번 달의 첫째 날과 마지막 날을 알아보겠습니다.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">year</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> month</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 달의 첫날: Sat Oct 01 2022 00:00:00 GMT+0900 (한국 표준시)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">year</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> month </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 달의 마지막 날: Mon Oct 31 2022 00:00:00 GMT+0900 (한국 표준시)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>지금까지의 내용으로 달력의 윗부분인 <code>Navigator</code>부분에 현재 년도와 월을 표할 수 있습니다.</p><p align="center"><img loading="lazy" width="220" alt="image" src="https://user-images.githubusercontent.com/63354527/193642338-b4cf65e2-2748-4f0f-9659-20412ecd1f25.png" class="img_ev3q"></p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">getNavigatorHTML</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">today</span><span class="token operator">:</span><span class="token plain"> Date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> html</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">button</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-name" style="color:rgb(241, 250, 140)">class</span><span class="token template-string html language-html tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">move-month-button</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">      ← </span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation constant" style="color:rgb(189, 147, 249)">MONTHS</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token template-string html language-html interpolation">today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">==</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">0</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">?</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">11</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">:</span><span class="token template-string html language-html interpolation"> today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">-</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html"> </span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation">today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">&lt;=</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">      </span><span class="token template-string html language-html interpolation number">0</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">        </span><span class="token template-string html language-html interpolation operator">?</span><span class="token template-string html language-html interpolation"> today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getFullYear</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">-</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">        </span><span class="token template-string html language-html interpolation operator">:</span><span class="token template-string html language-html interpolation"> today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getFullYear</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">button</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">h1</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-name" style="color:rgb(241, 250, 140)">class</span><span class="token template-string html language-html tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">month-display</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">      </span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation constant" style="color:rgb(189, 147, 249)">MONTHS</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token template-string html language-html interpolation">today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">br</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">/&gt;</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation">today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getFullYear</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">h1</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">button</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-name" style="color:rgb(241, 250, 140)">class</span><span class="token template-string html language-html tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">move-month-button</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">      </span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation constant" style="color:rgb(189, 147, 249)">MONTHS</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token template-string html language-html interpolation">today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">==</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">11</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">?</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">0</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">:</span><span class="token template-string html language-html interpolation"> today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">+</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html"> </span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation">today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">&gt;=</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">      </span><span class="token template-string html language-html interpolation number">11</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">        </span><span class="token template-string html language-html interpolation operator">?</span><span class="token template-string html language-html interpolation"> today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getFullYear</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">+</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">        </span><span class="token template-string html language-html interpolation operator">:</span><span class="token template-string html language-html interpolation"> today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getFullYear</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html"> →</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">button</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">  </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이렇게 네비게이션을 만들어준 후에 전달과 다음달로 이동할 때 네비게이션과 캘린더 부분을 다시 렌더링 하면 달력이 완성됩니다.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">previousMonthButtonDidPress</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  displayDate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setMonth</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">displayDate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getMonth</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">renderNavigator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getElementById</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"navigator"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> displayDate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">renderCalendar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getElementById</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"calendar"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> displayDate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이제 네비게이션 부분을 완성했으니 캘린더부분으로 가보겠습니다. 캘린더의 최상단에는 일~월 날짜가 표시되어있습니다.</p><p><img loading="lazy" src="https://user-images.githubusercontent.com/63354527/193645668-772d805b-d2fe-480c-afe1-f3a225aab63d.png" alt="image" class="img_ev3q"></p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> d </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> d </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">NUMBER_OF_DAYS_IN_WEEK</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> d</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  calendarContents</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    html</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">      </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">div</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-name" style="color:rgb(241, 250, 140)">class</span><span class="token template-string html language-html tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html tag attr-value interpolation constant" style="color:rgb(189, 147, 249)">NAME_OF_DAYS</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">d</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"> calendar-cell</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">        </span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation constant" style="color:rgb(189, 147, 249)">LONG_NAME_OF_DAYS</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token template-string html language-html interpolation">d</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">      </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">div</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">    </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>코드로 표현하면 일~월을 캘린더 컨텐츠 배열에 푸쉬해주면 됩니다. 그 다음 실제 캘린더를 렌더링할 건데 보여지는 부분은 3가지입니다. 이전달, 현재달, 다음달 따라서 3번의 for문에서 calendar 각각의 달을 찍는 로직을 작성해보면 다음과 같습니다.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> d </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  d </span><span class="token operator">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">thisMonthFirstDate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getDay</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">?</span><span class="token plain"> thisMonthFirstDate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getDay</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">NUMBER_OF_DAYS_IN_WEEK</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  d</span><span class="token operator">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  calendarContents</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    html</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">div</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">      </span><span class="token template-string html language-html tag attr-name" style="color:rgb(241, 250, 140)">class</span><span class="token template-string html language-html tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          </span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">d </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">%</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">7</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">===</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">0</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">?</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">"sun"</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">:</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">""</span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          </span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">d </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">%</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">7</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">===</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">6</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">?</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">"sat"</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">:</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">""</span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          calendar-cell</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          past-month</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">        </span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">      </span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation">lastMonthLastDate</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">+</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html">/</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation">lastMonthLastDate</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getDate</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">-</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">      thisMonthFirstDate</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getDay</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">+</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">      d </span><span class="token template-string html language-html interpolation operator">+</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">      </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">-</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">      </span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation">thisMonthFirstDate</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getDay</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">&gt;</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">0</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">?</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">0</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">:</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation constant" style="color:rgb(189, 147, 249)">NUMBER_OF_DAYS_IN_WEEK</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">div</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> d </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> d </span><span class="token operator">&lt;</span><span class="token plain"> thisMonthLastDate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">getDate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> d</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  calendarContents</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    html</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">div</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">      </span><span class="token template-string html language-html tag attr-name" style="color:rgb(241, 250, 140)">class</span><span class="token template-string html language-html tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          </span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">today</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getDate</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">===</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> d </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">+</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">1</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">&amp;&amp;</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">      </span><span class="token template-string html language-html tag attr-value interpolation constant" style="color:rgb(189, 147, 249)">ACTUAL_TODAY</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getFullYear</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">===</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> today</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getFullYear</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">&amp;&amp;</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">      </span><span class="token template-string html language-html tag attr-value interpolation constant" style="color:rgb(189, 147, 249)">ACTUAL_TODAY</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getDate</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">===</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> today</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getDate</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">&amp;&amp;</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">      </span><span class="token template-string html language-html tag attr-value interpolation constant" style="color:rgb(189, 147, 249)">ACTUAL_TODAY</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">===</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> today</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">        </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">?</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">"today"</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">        </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">:</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">""</span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          </span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">thisMonthFirstDate</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getDay</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">+</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> d</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">%</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">7</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">===</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">0</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">?</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">"sun"</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">:</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">""</span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          </span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">thisMonthFirstDate</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getDay</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">+</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> d</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">%</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">7</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">===</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">6</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">?</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">"sat"</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">:</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">""</span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          calendar-cell</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          this-month</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">        </span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">      </span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation">today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">+</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html">/</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation">d </span><span class="token template-string html language-html interpolation operator">+</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html"> </span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation">today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getDate</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">===</span><span class="token template-string html language-html interpolation"> d </span><span class="token template-string html language-html interpolation operator">+</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">&amp;&amp;</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">      </span><span class="token template-string html language-html interpolation constant" style="color:rgb(189, 147, 249)">ACTUAL_TODAY</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getFullYear</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">===</span><span class="token template-string html language-html interpolation"> today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getFullYear</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">&amp;&amp;</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">      </span><span class="token template-string html language-html interpolation constant" style="color:rgb(189, 147, 249)">ACTUAL_TODAY</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getDate</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">===</span><span class="token template-string html language-html interpolation"> today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getDate</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">&amp;&amp;</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">      </span><span class="token template-string html language-html interpolation constant" style="color:rgb(189, 147, 249)">ACTUAL_TODAY</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">===</span><span class="token template-string html language-html interpolation"> today</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">        </span><span class="token template-string html language-html interpolation operator">?</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation string" style="color:rgb(255, 121, 198)">" today"</span><span class="token template-string html language-html interpolation"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html interpolation">        </span><span class="token template-string html language-html interpolation operator">:</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation string" style="color:rgb(255, 121, 198)">""</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">div</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> nextMonthDaysToRender </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">7</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">calendarContents</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">length </span><span class="token operator">%</span><span class="token plain"> </span><span class="token number">7</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> d </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> d </span><span class="token operator">&lt;</span><span class="token plain"> nextMonthDaysToRender</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> d</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  calendarContents</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    html</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">div</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">      </span><span class="token template-string html language-html tag attr-name" style="color:rgb(241, 250, 140)">class</span><span class="token template-string html language-html tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          </span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">nextMonthFirstDate</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getDay</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">+</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> d</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">%</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">7</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">===</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">0</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">?</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">"sun"</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">:</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">""</span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          </span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)">nextMonthFirstDate</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html tag attr-value interpolation method function property-access" style="color:rgb(80, 250, 123)">getDay</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">+</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> d</span><span class="token template-string html language-html tag attr-value interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">%</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">7</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">===</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation number" style="color:rgb(255, 121, 198)">6</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">?</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">"sat"</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation operator" style="color:rgb(255, 121, 198)">:</span><span class="token template-string html language-html tag attr-value interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token template-string html language-html tag attr-value interpolation string" style="color:rgb(255, 121, 198)">""</span><span class="token template-string html language-html tag attr-value interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          calendar-cell</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">          next-month</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag attr-value" style="color:rgb(255, 121, 198)">        </span><span class="token template-string html language-html tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">      </span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation">nextMonthFirstDate</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string html language-html interpolation method function property-access" style="color:rgb(80, 250, 123)">getMonth</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token template-string html language-html interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation operator">+</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html">/</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string html language-html interpolation">d </span><span class="token template-string html language-html interpolation operator">+</span><span class="token template-string html language-html interpolation"> </span><span class="token template-string html language-html interpolation number">1</span><span class="token template-string html language-html interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string html language-html"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token template-string html language-html">    </span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token template-string html language-html tag" style="color:rgb(255, 121, 198)">div</span><span class="token template-string html language-html tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이제 캘린더를 렌더링했으니 스타일링만 입혀주면 <a href="https://radiant-granita-599567.netlify.app/" target="_blank" rel="noopener noreferrer">애플리케이션</a>이 완성됩니다. Vanilla, TypeScript, React 총 세가지 버전으로 만들어서 연습을 했습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="배포-링크">배포 링크<a class="hash-link" href="#배포-링크" title="Direct link to heading">​</a></h2><ul><li><a href="https://radiant-granita-599567.netlify.app/" target="_blank" rel="noopener noreferrer">JavaScript</a></li><li><a href="https://radiant-granita-599567.netlify.app/" target="_blank" rel="noopener noreferrer">TypeScript</a></li><li><a href="https://mozi-calendar.vercel.app/" target="_blank" rel="noopener noreferrer">React</a></li></ul>]]></content>
        <author>
            <name>이현진</name>
            <uri>https://github.com/hyunjinee</uri>
        </author>
        <category label="Calendar" term="Calendar"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thinking in React]]></title>
        <id>thinking-in-react</id>
        <link href="https://team-yaza.github.io/blog/thinking-in-react"/>
        <updated>2022-09-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Thinking in React(React로 생각하기)라는 주제로 발표를 진행하겠습니다. React로 생각한다는 표현이 조금 추상적일 수 있는데, 이 발표에는 React를 다룰 때 갖고 있어야하는 생각들을 담았습니다.]]></summary>
        <content type="html"><![CDATA[<img loading="lazy" width="774" alt="스크린샷 2022-09-29 오전 12 11 04" src="https://user-images.githubusercontent.com/63354527/193643629-5f283f85-4f37-4336-a7d1-69a2d72c0fd5.png" class="img_ev3q"><p><code>Thinking in React(React로 생각하기)</code>라는 주제로 발표를 진행하겠습니다. React로 생각한다는 표현이 조금 추상적일 수 있는데, 이 발표에는 React를 다룰 때 갖고 있어야하는 생각들을 담았습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/c7b40d7b-9225-422c-8b96-92979595cdcb/image.png" class="img_ev3q"></p><p>먼저 <code>DOM</code>에 대한 이야기부터 시작해보겠습니다. <code>DOM</code>은 <code>Document Object Model</code>의 약자로, 브라우저가 <code>HTML</code>을 파싱하여 객체 형태로 만든 것을 말합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/9743851e-3bfe-4af9-82ea-276cb0eadb77/image.png" class="img_ev3q"></p><p>위와 같은 <code>HTML</code>구조를 갖는 웹사이트가 있다고 가정해보겠습니다.
<code>HTML</code>은 문자열입니다.문자열은 다루기 어렵습니다.(파싱, 합치기등의 작업)</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/cfbcd4c4-4d6f-492a-bdd9-162ea47ffb9c/image.png" class="img_ev3q"></p><p>브라우저는 이 다루기 어려운 문자열을 훨씬 다루기 쉬운 객체 형태로 바꿔주고, 이 객체를 <code>DOM</code>이라 합니다. 개발자는 JavaScript를 이용해 <code>DOM</code>을 조작하여 웹 애플리케이션을 개발합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/99b1ec81-37e1-48fd-8c66-c469f45d708d/image.png" class="img_ev3q"></p><p>하지만 JavaScript로 직접 <code>DOM</code>을 조작하는 것은 여러가지 단점이 따라옵니다.</p><ol><li>JavaScript로 <code>DOM</code>을 조작할 때 HTML의 구조를 파악하기 어렵습니다.(<code>DOM</code>을 직접 생성, 수정 삭제할 때 구조를 파악하기 어렵습니다.)</li><li>표준을 따르는 브라우저도 많지만, 그 안에서도 다른 동작을 가지고 있을 수 있습니다.</li><li><a href="https://im-developer.tistory.com/110" target="_blank" rel="noopener noreferrer">Live Collection과 Static Collection</a></li></ol><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/4981b176-bf3a-4c99-b5f0-b94e2c0a85fa/image.png" class="img_ev3q"></p><p><code>Live Collection</code>은 <code>DOM API</code>가 반환한 값이 <code>Live</code>한 상태를 의미합니다. 즉, <code>DOM</code>의 실시간 변경사항에 따라 언제든 값이 바뀔 수 있습니다. 반면에 <code>Static Collection</code>은 <code>DOM</code>의 실시간 변경사항에 따라 값이 바뀌지 않습니다.</p><p><code>DOM API</code>는 반환하는 값이 <code>Live</code> 할 수도 있고, <code>Static</code> 할 수도 있기 때문에 <code>"일관성이 없다"</code>라고 표현합니다.</p><p><code>DOM API</code>가 일관성이 없고 사용하기 불편하다면 어떻게 해야할까요?</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/0541ef55-68e9-4f91-a3cc-9983f3d017bd/image.png" class="img_ev3q"></p><p>가장 간단한 답으로는 <code>DOM API</code>을 사용하지 않는 방법이 있습니다. <code>DOM API</code>를 직접 사용하지 않고 중간에 매개체를 두어서 <code>DOM</code>을 조작할 수 있습니다.</p><p>이 매개체가 <strong>React</strong>입니다.</p><p>React는 <code>DOM</code>조작과 같이 어려운 일은 자신이 하고, 개발자에게는 훨씬 편리한 API를 제공해줍니다.</p><p>마치 <code>HTML</code>이라는 문자열을 직접 다루기 어렵기 때문에 <code>DOM</code>이라는 객체를 만든 것 처럼, <code>DOM</code>을 직접 다루기 어렵기 때문에 <code>React</code>를 만든 것이라고 할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/7a256c65-927d-4f3b-ab0f-aa1d077ccf7b/image.png" class="img_ev3q"></p><p>React는 웹 애플리케이션의 UI를 재사용 가능한 컴포넌트들을 모아서 구성합니다. 각 컴포넌트에는 <code>데이터 모델</code>이 존재합니다. 애플리케이션의 UI와 상호작용하려면 UI에 내재하는 <code>데이터 모델</code>을 바꿈으로써 상호작용할 수 있습니다.</p><p>이 <code>데이터 모델</code>을 React에서는 <code>State(상태)</code>라고 합니다. <code>상태</code>란 주어진 시간에 대해 시스템을 나타내는 것으로 언제든지 변경될 수 있고 <code>상태</code>가 업데이트되면 React 컴포넌트는 <code>렌더링</code>됩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/3e57afa8-1ec5-4832-b940-a4fe323e8386/image.png" class="img_ev3q"></p><p><code>렌더링</code>이란 React가 컴포넌트에게 현재 <code>Props</code>와 <code>State</code>에 기반하여 UI에 어떻게 보여지고 싶은지 알려달라고 요청하는 과정입니다. <code>렌더링</code>은 간단히 말해서 함수 컴포넌트를 호출하는 것이라고 할 수 있으며, 함수에서 반환하는 <code>JSX</code>는 시간에 따른 UI의 스냅샷과 같습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/3d0db11a-900f-445d-878a-b63fc08153e0/image.png" class="img_ev3q"></p><p>컴포넌트가 위와 같은 트리 구조를 갖고 있다고 해보겠습니다. 빨간색 컴포넌트는 상태가 업데이트된 컴포넌트입니다. 상태가 업데이트되면 컴포넌트는 업데이트가 필요하다는 표시를 합니다.(빨간색 React로고)</p><p>React는 상태 업데이트를 감지하면 렌더링을 <code>큐(queue)</code>에 넣습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/fd9bbf85-7061-4a29-8bfc-41dbe1c6173b/image.png" class="img_ev3q"></p><p>React는 트리의 최상단(<code>A</code>)부터 렌더 패스(<code>Render Pass</code>)를 시작합니다. <code>A</code>에는 업데이트가 필요하다는 마크가 없는 것을 보고 지나칩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/214a6f1d-ba11-4d2b-a367-60edbe14df95/image.png" class="img_ev3q"></p><p>다음은 <code>B</code>를 방문합니다. React는 <code>B</code>에 업데이트가 필요하다는 마크가 있는 것을 보고 렌더링합니다. 여기서 중요한 점은 <strong>React는 기본적으로 부모 컴포넌트가 렌더링되면, 모든 자식 컴포넌트를 재귀적으로 렌더링한다는 점입니다.</strong></p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/2979d66f-3274-4061-b076-5fbf15451bc3/image.png" class="img_ev3q"></p><p>이에 따라 <code>C</code>와 <code>D</code>는 업데이트가 필요하다는 마크가 없지만 부모 컴포넌트인 <code>B</code>가 렌더링되었기 때문에 <code>C</code>와 <code>D</code>를 렌더링합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/3f6f366c-d41e-440d-b4ee-90576b673eba/image.png" class="img_ev3q"></p><p>다음으로 남은 <code>E</code>를 체크하고 업데이트가 필요하다는 마크가 없으므로 아래로 내려가서 업데이트가 필요하다는 표시가 있는 <code>F</code>를 발견하고 <code>F</code>를 렌더링합니다.</p><p>여기서 컴포넌트 트리 안에 있는 컴포넌트들 중에서는 <code>C</code>, <code>D</code>와 같이 직전과 똑같은 렌더링 결과물을 반환하는 컴포넌트가 존재합니다. 따라서 같은 결과물을 반환하는 컴포넌트는 <code>DOM</code>에 반영할 필요가 없습니다. 하지만 렌더링의 결과물이 같다는 것을 어떻게 알 수 있을까요?</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/4b8fd2dc-aa6b-402b-9ec1-8233b371b3e7/image.png" class="img_ev3q"></p><p>React는 <code>VirtualDOM</code>을 활용합니다. 기존 <code>VirtualDOM</code>과 상태 업데이트 후의 <code>VirtualDOM</code>에서 바뀐 부분만을 계산(<a href="https://ko.reactjs.org/docs/reconciliation.html" target="_blank" rel="noopener noreferrer"><code>diffing</code></a>)하여 실제 바뀐 부분만 <code>DOM</code>에 적용합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/ff68b753-2e7f-4946-88fe-5fbc6eacf504/image.png" class="img_ev3q"></p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/716cf8c9-fa94-4365-8bf3-a4e97569abd5/image.png" class="img_ev3q"></p><p>이를 React에서 <code>Reconciliation(재조정)</code>이라고 합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/d1af7085-410b-4263-829b-d1d54d359fdf/image.png" class="img_ev3q"></p><p>이러한 사실을 바탕으로 렌더링을 두 단계로 쪼갤 수 있습니다.</p><ul><li><code>Render phase(렌더 단계)</code>: 컴포넌트를 렌더링하고 변경 사항을 계산하는 모든 과정이 이루어지는 단계(<code>VirtualDOM 조작 단계</code>)</li><li><code>Commit phase(커밋 단계)</code>: 변경 사항을 실제 DOM에 적용하는 단계</li></ul><p><strong>렌더링과 DOM을 업데이트하는 것은 같은 것이 아니며</strong> 컴포넌트는 가시적인 변화가 없어도 렌더링될 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/dc409c72-6550-41fb-84cb-a27a62efed20/image.png" class="img_ev3q"></p><p>렌더링은 기본적으로 <code>상태</code> 업데이트에 의해 발생됩니다. 따라서 React 애플리케이션은 <code>상태 관리</code>를 어떻게 하느냐에 따라 애플리케이션의 미래가 결정됩니다. 불필요하거나 중복된 상태는 버그의 일반적인 원인이 될 수 있습니다.</p><p>즉, 적절한 <code>상태</code>를 적절한 <code>컴포넌트</code>에 배치시켜야합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/04c56eaf-5e05-4622-a401-91473b5ee8ea/image.png" class="img_ev3q"></p><p><code>Props(properties)</code>는 컴포넌트간에 값을 전달할 때 사용합니다.(<code>데이터 전달</code>)</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/47988e1a-c5fd-4217-ba98-f9f3a6cfd1dc/image.png" class="img_ev3q"></p><p>예를 들어 하위 컴포넌트 두개가 같은 상태(<code>현진</code>)를 갖는데 두 상태가 항상 함께 변경되기를 원할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/8c8360d9-efe5-4f2c-90d1-e489572d00fe/image.png" class="img_ev3q"></p><p>같이 변경되어야하는 두 상태는 <code>중복 상태</code>이므로 둘 다에서 상태를 제거하고 가장 가까운 공통 부모로 상태를 이동시킨후에 props를 통해 전달합니다. 이를 <code>상태 끌어올리기(Lifting State Up)</code>이라고 합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/ba942b5e-13ea-4268-ad4f-fdc2c90cda03/image.png" class="img_ev3q"></p><p>상태를 끌어올린 후에 하위 컴포넌트에게 <code>Props</code>로 전달합니다.</p><p>React에서는 데이터의 흐름이 상위 컴포넌트에서 하위 컴포넌트로 한 방향으로만 흐릅니다.(<code>단방향 데이터 흐름, Unidirectional Data Flow</code>)</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/889c0267-f501-4d74-aca6-d53041a07401/image.png" class="img_ev3q"></p><p><code>현진</code>이라는 상태를 <code>이현진</code>으로 바꾸고 싶다고 해봅시다.
하위 컴포넌트에서 상위 컴포넌트의 상태를 변경하고 싶다면 어떻게 해야할까요?</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/4db9190f-3d10-4e4d-811f-14b1c84c69fe/image.png" class="img_ev3q"></p><p>Props로 <strong>상태를 업데이트하는 함수를 전달</strong>하여 하위 컴포넌트에서 상태를 업데이트하는 함수를 호출하면됩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/2ebd2548-5ab0-4d18-977b-d7f9ff68c42c/image.png" class="img_ev3q"></p><p>이렇게 상태를 업데이트하면 하위 컴포넌트에서 상위 컴포넌트의 상태를 업데이트할 수 있습니다. 이렇게 <code>역방향 데이터 흐름(Inverse Data Flow)</code>을 추가할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/30670c8a-6bd1-4bdc-ab6a-d11ae9580b77/image.png" class="img_ev3q"></p><p>지금까지 상태를 애플리케이션에 분배하고 다뤄봤습니다. 브라우저내에서 모든걸 처리할 수 있다면 클라이언트 상태로도 충분하지만 대다수의 애플리케이션은 서버 상태가 존재합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/2fa20785-2bc2-4470-afbf-fa8d9c9b27fe/image.png" class="img_ev3q"></p><p>서버상태는 다음과 같은 특성을 지닙니다.</p><ul><li>서버 상태는 사용자의 제어를 벗어난 위치에서 원격으로 유지된다.</li><li>비동기 요청을 통해 <code>fetching</code>또는 <code>updating</code>이 가능하다.</li><li>소유권을 공유한다. 즉 사용자 모르게 다른 사용자가 변경할 수 있다.</li><li>시간이 지남에 따라 <code>stale</code>또는 <code>outdated</code>된다.</li></ul><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/d70765bd-bbc5-40e0-a243-0368270fef8b/image.png" class="img_ev3q"></p><p>React는 UI 라이브러리이기 때문에 데이터를 <code>fetching</code>하는것에는 관심이 없습니다. 단지 <code>fetching</code>한 데이터를 UI에 반영시키는 것에만 관심이 많습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/a578f5c7-998c-4fad-8293-86f0cfe87681/image.png" class="img_ev3q"></p><p>React는 상태에 따라 UI를 어떻게 렌더링할지에 관심이 있기 때문에 서버 상태를 다루려면 여러가지 상태를 정의해야합니다. <code>Loading</code>, <code>Error</code>, <code>Success</code> 상태를 정의하여 각각의 상태별로 매 렌더링마다 UI의 스냅샷을 찍어서 보여줍니다.</p><p>React에서는 상태를 업데이트하는 로직이 복잡해지면 <code>reducer</code>를 사용하듯이, 컴포넌트 내부에 <code>Loading</code>, <code>Error</code>, <code>Success</code>와 같은 상태를 두지 않고 전역 상태 관리자인 <code>Redux</code>를 사용하여 상태를 업데이트하는 로직을 컴포넌트 외부로 빼내서 비동기 요청에 대한 렌더링 로직을 작성했습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/194756c0-9119-473c-8914-5085224a6861/image.png" class="img_ev3q"></p><p>여기서 우리는 의문을 제기해야할 필요가 있습니다. <strong>전역 상태관리 라이브러리인 <code>Redux</code>의 역할이 과연 API 요청에 대한 각각의 상태를 정의해 렌더링 로직을 작성하는 것인가?</strong></p><p>답은 아니라고 생각합니다. 전역 상태관리자의 역할은 전체 애플리케이션에서 정말 전역적으로 관리해야하는 상태(theme, 사이드바 상태등)를 가지고 있어야합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/9f898be8-0776-49c0-97b7-415096dd01ed/image.png" class="img_ev3q"></p><p>기존에는 API 요청의 상태(Loading, Error, Success)에 따라 적합한 UI를 보여주기 위해 컴포넌트 외부에 수많은 보일러 플레이트 코드를 작성해야했습니다.</p><p>React Query는 이를 해결합니다. React Query의 역할은 명확합니다.</p><p><code>서버 상태를 관리하기위해 필요했던 보일러플레이트 코드를 제거한다. 그리고 단 몇줄의 코드로 대체한다.</code></p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/fd41511a-8c9b-44b0-b1a1-86fb7e8253f1/image.png" class="img_ev3q"></p><p>React Query를 사용하면 여러 상태를 정의해야하는 문제는 해결됩니다. 하지만 컴포넌트가 <code>isLoading</code>과 같은 상태일 때 반환할 UI를 정의해줘야합니다.</p><p><strong>이는 UI의 일관성을 해칩니다.</strong></p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/507b8693-1f77-4590-b39d-beb1cd980aa9/image.png" class="img_ev3q"></p><p><code>Suspense</code>는 이를 해결합니다. <code>Suspense</code>의 목표는 서버상태를 읽어오는 것을 React의 props와 state처럼 쉽게 다루는 것입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/4bedb6b4-fec8-4ae3-bd72-43e37fb8bcff/image.png" class="img_ev3q"></p><p>이렇게 비동기적으로 데이터를 불러오는 컴포넌트를 <code>Suspense</code>감싸고 <code>fallback</code>으로 보여줄 컴포넌트를 전달합니다. 이렇게하면 기존 UI의 로딩 상태를 <code>명령형(imperative)</code> 방식으로 정의해야했던 것을 React의 패러다임에 맞게 <code>선언적(declarative)</code>인 방식으로 바꿀 수 있습니다.</p><blockquote><p>Suspense는 단순히 로딩 스피너가 아닙니다. React 18에서는 Suspense를 이용한 두개의 SSR(Server Side Rendering)기능이 추가됩니다. <a href="https://www.youtube.com/watch?v=pj5N-Khihgc" target="_blank" rel="noopener noreferrer">HTML Streaming과 Selective Hydration</a></p></blockquote><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/9123524d-6968-4431-8002-573d5ca2a599/image.png" class="img_ev3q"></p><p>지금까지 React에 관한 다양한 내용들을 다루었는데 마지막으로 React v18에 대해서 이야기해 보려고 합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/2b6b6393-cf14-4034-9d2b-24c5fe5e9752/image.png" class="img_ev3q"></p><p><code>2161일.</code> React팀이 React <code>v18.0.0</code>을 릴리즈하는데 걸린 시간입니다.(React팀이 Async rendering이라는 개념을 소개한 이후 2161일 걸림) 왜 이렇게 오래걸렸을까요?</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/63ea9a6f-83a6-4e17-a0f6-f5cf855a1b58/image.png" class="img_ev3q"></p><p>React팀의 목표는 하나였습니다. <code>성능이 좋은 React를 만들어서 수백만개의 React로 만들어진 웹사이트 성능을 높인다.</code></p><p>가장 큰 문제는 React가 아닌 React를 만든 언어에 있었습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/d511f619-1bb7-4a23-95bc-d7a2c8b84be8/image.png" class="img_ev3q"></p><p>React는 JavaScript 위에서 만들어졌기 때문에 JavaScript의 제약을 따를 수 밖에 없습니다. 특히 JavaScript가 브라우저 위에서 동작하는 방식을 따릅니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/12f2a4c6-5c7b-40df-99f8-13c6eccbf372/image.png" class="img_ev3q"></p><p><strong>브라우저의 메인 스레드는 싱글 스레드로 <code>한번에 하나</code>의 작업만 처리할 수 있습니다.</strong> HTML을 파싱하거나 JavaScript를 실행하거나 화면에 보이는 내용을 렌더링하는데 사용됩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/7015347b-cf23-44a3-84a5-b23f9487d380/image.png" class="img_ev3q"></p><p>React를 비롯한 대다수의 UI 라이브러리 작동 방식도 이 한계(브라우저의 메인 스레드)에 종속될 수 밖에 없습니다. React도 화면에 그리기 위한 내부 연산, 즉 렌더링을 시작해서 화면을 완성할 때까지 실행을 멈출수 없습니다. 이를 React 팀에서는 블로킹 렌더링이라고 부릅니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/76b8430b-11ae-47e9-87e4-497d6c4561a7/image.png" class="img_ev3q"></p><p>정확히는 React 18 이전까지는 그랬습니다.
React 18에서는 동시성 기능이 추가되었습니다.(<a href="https://www.youtube.com/watch?v=FZ0cG47msEk&amp;t=1255" target="_blank" rel="noopener noreferrer"><code>Concurrent features</code></a>)</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/189b5352-c1d1-42bd-a0a6-fe00dab7488d/image.png" class="img_ev3q"></p><p><a href="https://tv.naver.com/v/23652451" target="_blank" rel="noopener noreferrer">동시성이란 두개 이상의 독립적인 작업을 잘게 나누어 Context Switching을 하며 동시에 실행되는 것처럼 보이도록 프로그램을 구조화하는 방법입니다.</a></p><p>동시성 기능을 활용하면 렌더링을 잘게 쪼개어 상태 업데이트에 우선순위를 두어 좀더 긴급한 상태 업데이트를 먼저 수행할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/83f45f6e-3d17-42db-a20e-9ed53e3952a4/image.png" class="img_ev3q"></p><p>동시성 기능은 마치 고속차선과 일반차선을 두는 것과 같습니다. 고속차선으로는 좀더 긴급한 상태업데이트가 지나갈 수 있도록 하고, 일반차선으로는 좀 덜 긴급한 상태업데이트가 지나갈 수 있도록 개발자가 조절할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/4f94ab34-cb25-4ab0-b306-568f86c2c088/image.png" class="img_ev3q"></p><p>이제 마지막으로 발표내용을 정리해보겠습니다.</p><ul><li>React는 DOM 조작의 문제점을 해결하기위해 만들어졌다.</li><li>React는 Reconciliation(재조정) 과정을 통해 DOM을 업데이트한다.</li><li>React의 핵심은 상태 관리이다.</li><li>React에서 Concurrent Feature를 활용해 렌더링 우선순위를 정할 수 있다.</li></ul><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/21f54714-a00d-4729-835f-85a35d386757/image.png" class="img_ev3q"></p><p>React는 UI를 변수에 저장할 수 있으며 값으로 전달할 수 있습니다. 즉 React는 <code>value UI</code>입니다.</p><p><strong>React의 핵심 원칙은 UI는 값이라는 것입니다.</strong></p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/b57a1ce3-31ac-47f2-ad8c-70c7f1eca431/image.png" class="img_ev3q"></p><p>감사합니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="발표자료">발표자료<a class="hash-link" href="#발표자료" title="Direct link to heading">​</a></h2><p><a href="https://drive.google.com/file/d/1cc_6qva6u9h2LOnC6ABlmYANgco7JK7J/view?usp=sharing" target="_blank" rel="noopener noreferrer">Thinking in React.pdf</a>
<a href="https://drive.google.com/file/d/1m9r1bv8sCh-pILg4p8T_mTPmT2Bux4Ph/view?usp=sharing" target="_blank" rel="noopener noreferrer">Thinking in React.key</a></p>]]></content>
        <author>
            <name>이현진</name>
            <uri>https://github.com/hyunjinee</uri>
        </author>
        <category label="React" term="React"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL]]></title>
        <id>GraphQL</id>
        <link href="https://team-yaza.github.io/blog/GraphQL"/>
        <updated>2022-08-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Intro]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/e254c4ee-c148-4722-8fa9-a98de1baca87/image.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a class="hash-link" href="#intro" title="Direct link to heading">​</a></h2><blockquote><p>소프트웨어 마에스트로 컨퍼런스 발표(8.31) 내용을 요약한 글 입니다.</p></blockquote><p>안녕하세요. 소프트웨어 마에스트로 연수생 이현진입니다.</p><p>이번 발표에서는 GraphQL의 컨셉, REST API와의 차이, 실제 활용 실습과 더 나아가 React에서 GraphQL이 해결할 수 있는 문제에 대해서 이야기해보도록 하겠습니다.</p><p><code>발명은 필요에의해서 시작됩니다.</code>
페이스북이 그래프QL을 만들기로한 이유는 다음과 같습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/844a29e7-d31a-49ed-8900-6514332b04a4/image.png" class="img_ev3q"></p><ol><li>모바일 사용량의 증가로 효율적인 데이터 로딩이 필요(저전력 장치 및 느린 네트워크 문제)</li><li>다양한 플랫폼(플랫폼의 다양화로 인해 모든 요구 사항에 맞는 하나의 API를 구축하고 유지관리하기 어려움)</li><li>빠른 기능 개발에 대한 기대(지속적 배포는 업계의 표준이 되었고 빠른 반복과 빈번한 제품 배포는 필수적이고 이에따라, <code>프론트엔드와 백엔드의 의사소통 비용은 증가</code>)</li></ol><p>이런 문제들을 해결하기위한 방법은 뭘까요? 각각 대응시켜보겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/ee6d3f15-3988-402f-9833-ce1c401eaeff/image.png" class="img_ev3q"></p><ol><li><code>필요한 데이터</code>만 <code>한번에</code>, <code>정확하게</code> 요청한다.</li><li>엔드포인트를 <code>통합</code>한다.</li><li>프론트엔드와 백엔드의 <code>커뮤니케이션을 줄이고</code> 개발에 집중한다.</li></ol><p>이 해결 방법이 곧 <code>GraphQL</code>입니다.
이제 GraphQL이 어떻게 이 문제들을 해결했는지 알아보겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/3b86bb70-ddda-43b2-8cb2-4db48e7337ed/image.png" class="img_ev3q"></p><p>GraphQL은 Facebook에서 개발한 오픈소스 언어로 현실 세계의 데이터를 표현하는 가장 적합한 방법이 <code>Graph</code>라는 사실에 착안합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/c5d065cd-1731-481a-931c-1688741e2941/image.png" class="img_ev3q"></p><p>사람들은 다른 사람들과 관계를 맺으며 살아갑니다. 가족, 친구, 동료와 사회적 관계를 맺고 있습니다. 이러한 관계중 일부는 겹치지만 겹치지 않는 관계도 존재합니다. 우리 모두는 각자의 삶 내에서 연결된 관계 그래프를 지닙니다.</p><p>GraphQL이 API 개발에서 해결하려고 하는 문제가 이렇게 서로 <code>연결된 데이터</code>입니다. GraphQL API는 데이터를 효율적으로 연결할 수 있으며, 요청의 수와 복잡성을 줄이고 클라이언트가 정확히 필요로하는 데이터를 제공할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/3908ea9f-d0aa-4365-8dcf-8b4fc43b7bb4/image.png" class="img_ev3q"></p><p>GraphQL은 두가지 의미로 해석될 수 있습니다.</p><ol><li>GraphQL은 API를 위한 <code>Query Language</code>이다.</li><li>GraphQL은 서버사이드에서 실행되는 쿼리를 해석하는 <code>Runtime</code>이다.</li></ol><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/3a9b90c4-71b8-4d16-b016-117c89c80fe8/image.png" class="img_ev3q"></p><p><code>Query Language</code>는 데이터베이스 또는 데이터 관리 시스템에 접근하기 위한 언어로 대표적으로 <code>SQL</code>을 들 수 있습니다.</p><p><code>SQL</code>이 데이터베이스에 질의를 하는 언어인 반면에, <code>GQL</code>은 클라이언트에서 API에게 질의를 하는 언어입니다.
따라서 GraphQL은 데이터베이스의 종류에 구애받지 않고 API가 사용되는 모든 컨텍스트에서 효과적으로 사용할 수 있습니다.</p><p>GraphQL은 백엔드 입장에서 구현돼야할 <code>Runtime</code>이기도 합니다.</p><p>API 사용자는 GraphQL 언어를 사용해서 필요한 데이터를 정확하게 요구하기 위한 텍스트를 구성하고 클라이언트는 이 텍스트 요청을 전송채널(예:HTTPS)를 통해 API 서비스에 전달합니다. 그러면 GraphQL Runtime 계층이 이 텍스트 요청을 받아서 백엔드에 있는 다른 서비스들과 커뮤니케이션하고 그 결과들을 모아서 적합한 데이터를 만듭니다. 그렇게 만들어진 데이터를 JSON과 같은 형식으로 API 사용자에게 반환하는 것 입니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="graphql-vs-rest">GraphQL vs REST<a class="hash-link" href="#graphql-vs-rest" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/4c3b4ff4-49bc-4bb3-b119-4b1faf4f8956/image.png" class="img_ev3q"></p><p>API는 데이터가 데이터베이스에서 애플리케이션으로 흐르는 인터페이스를 제공합니다.
즉, API의 사용자는 서버가 어떤 언어로 만들어져있는지, 데이터베이스는 어떤 것을 쓰는지 신경쓸 필요가 없고 우리가 중요하다고 생각하는 것에 집중할 수 있도록 도와줍니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/6b3851b8-46ce-4bb4-bfa1-c3dd3ec4cb76/image.png" class="img_ev3q"></p><p>현대의 많은 애플리케이션은 REST API로 구성되어있습니다. REST 형식의 API는 URL 구조와 쿼리 매개변수를 사용하여 서버에 요청합니다.
REST API는 URL과 요청 METHOD를 조합하기 때문에 다양한 Endpoint가 존재합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/d7edb728-9ee3-4cd0-a2cb-bcb4ac2b27df/image.png" class="img_ev3q"></p><p>블로그 애플리케이션을 렌더링하는 것을 예로 들어보겠습니다.</p><p>블로그 애플리케이션은 크게 Posts, Profile, Followers 컴포넌트로 이루어져 있고 각각은 하나의 REST API Endpoint에 매핑됩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/e70c8ff6-e06d-4fac-9f39-9196d9da3023/image.png" class="img_ev3q"></p><p>REST API에서는 URL이 자원을 나타내기 때문에 세가지 각기 다른 네트워크 요청을 보내야만 자원을 가져올 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/3d8cc27f-dc95-4530-8b1f-c250b4a64a9c/image.png" class="img_ev3q"></p><p>반면 GraphQL은 이 3개의 네트워크 요청을 단 하나의 요청으로 통합할 수 있습니다.</p><p>왼쪽 위가 GraphQL로 작성한 쿼리문이고 오른쪽 아래가 응답 데이터입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/e5e67f36-c35d-423c-8ad9-098102f890e8/image.png" class="img_ev3q"></p><p>GraphQL 쿼리와 응답 내용의 구조는 상당히 직관적입니다. 요청하는 쿼리문의 구조와 응답의 구조는 거의 일치합니다.</p><p>또한 user와 연결되어있는 posts와 followers 같은 리소스들을 하나의 요청으로 처리할 수 있습니다.</p><p>이런 GraphQL의 특징을 <code>선언적 data fetching</code>이라고 합니다.
자신이 선언한 쿼리 내용대로 데이터를 받아올 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/33c45aa9-a442-4cd6-8e0e-fe5b1229c57c/image.png" class="img_ev3q"></p><p>예제를 통해 알 수 있는 REST API의 문제는 두가지입니다.</p><p>첫째, <code>Overfetching</code>. REST API의 특성상 데이터를 주고받을 때 클라이언트에서 활용하지 않는 필요없는 데이터까지 주고받을 확률이 높습니다. 따라서 이는 불필요한 리소스 낭비를 초래합니다.</p><p>둘째, <code>Underfetching</code>. 필요한 데이터를 만들기 위해 여러번의 API 호출이 필요합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/ca36db41-2f05-4ecb-b2c8-148ed73c0b0c/image.png" class="img_ev3q"></p><p>이를 통해 GraphQL이 가지는 이점은 명확합니다.</p><p><code>여러개의 엔드포인트가 아닌 하나의 엔드포인트를 만들고 한번의 요청으로 원하는 정보만를 얻는다. 즉 Overfetching과 Underfetching 문제를 해결한다.</code></p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/9f4ba80d-d790-4879-8383-c415e4b3a0c7/image.png" class="img_ev3q"></p><p>예시를 통해 GraphQL과 REST를 비교해보면 글의 초반부에 소개드렸던 REST API의 문제점 두가지를 해결해준다는 것을 알 수 있습니다.</p><ol><li>효율적인 데이터 로딩이 필요 -&gt; 한번의 요청으로 원하는 데이터만 받아옴.</li><li>다양한 플랫폼 지원 -&gt; 원하는 데이터의 형식을 클라이언트 측에서 결정할 수 있음.</li></ol><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/15c09e1a-e026-4ea2-bebc-07a20ab352c5/image.png" class="img_ev3q"></p><p>마지막 문제인 Communication 문제는 어떻게 해결할까요?</p><p>REST API의 문제였던 프론트엔드와 백엔드의 <code>커뮤니케이션 비용 문제</code>를 GraphQL이 어떻게 해결하는지 알아보겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/68db19d3-5f7e-41ef-8129-960293f5132e/image.png" class="img_ev3q"></p><p>보통 REST API는 서버에서 데이터를 내려준대로 활용합니다.(<code>Fixed Data Structures</code>)
신기한 점은 GraphQL은 클라이언트에서 가져올 데이터를 선언할 수 있다는 점입니다.</p><p>어떻게 선언적으로 데이터를 가져올 수 있을까요?
데이터의 <code>구조</code>가 정해져 있다면 가능합니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="schema-resolver">Schema, Resolver<a class="hash-link" href="#schema-resolver" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/4324cd9d-be44-49c7-b604-7c8c8d78c9a4/image.png" class="img_ev3q"></p><p>이 구조를 GraphQL에서는 <code>스키마</code>(schema)라고 합니다.</p><p>스키마는 API가 무엇을 할 수 있는지 기술한 것이기 때문에 GraphQL 클라이언트는 이 스키마를 통해 서비스에 어떻게 요청할지 알 수 있습니다.
스키마는 타입을 가진 필드를 그래프로 나타낸 것이며 이 그래프는 데이터 서비스를 통해 읽고 수정할 수 있는 모든 객체를 보여줍니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/3102c4b0-112e-4553-bc69-dd9065e51f88/image.png" class="img_ev3q"></p><p>GraphQL은 프론트엔드 팀과 백엔드 팀이 스키마를 같이 정의하는 것으로 커뮤니케이션 비용을 줄입니다.</p><p>프론트엔드 팀과 백엔드 팀이 회의실에 앉아서 스키마에 대해 토의하고 무엇이 필요한지 정의합니다. 서로 스키마를 공유한다면 더이상의 커뮤니케이션은 필요하지 않습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/c09b1615-4b03-40c8-a562-c8106f490305/image.png" class="img_ev3q"></p><p>회의가 끝나면 백엔드 팀은 <code>resolver</code>(이하 리졸버)를 정의하는 것을 통해 같이 정의한 스키마를 충족시킵니다.</p><p>리졸버 함수는 GraphQL의 뒤에서 움직이는 대부분의 처리 로직으로 스키마의 각 필드는 리졸버 함수와 연동되며, 리졸버 함수에는 각 필드가 어떤 값을 가져와야하는지 정의합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/ade96a02-182e-44a0-8a53-72071be94d78/image.png" class="img_ev3q"></p><p>정리를 해보면, 프론트엔드팀과 백엔드팀이 먼저 스키마를 정의한 후 백엔드 팀은 그 데이터를 가져오기 위한 리졸버 함수를 정의합니다.</p><p>이후 클라이언트에서 GraphQL 언어로 텍스트 형태로 필요한 데이터를 요청하면 백엔드에서 구현된 GraphQL Runtime이 요청을 해석하여 클라이언트가 원하는 데이터를 내려줍니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="github-api를-이용한-실습">Github API를 이용한 실습<a class="hash-link" href="#github-api를-이용한-실습" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/86984f0f-c4ae-432a-946c-e7194ba79228/image.png" class="img_ev3q"></p><p>Github는 2017년까지 REST API를 사용하다가 GraphQL로 변경했습니다.<br>
<!-- -->이 실습에서는 GraphQL을 사용해서 제가 만든 이슈에 댓글을 달아보는 것을 해보도록 하겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/cc239486-4bf9-49ae-9291-fafa8c56bac7/image.png" class="img_ev3q"></p><p>제가 미리 테스트 이슈를 한개 만들어 놓았고, 이 이슈에 GraphQL을 사용하여 댓글을 달아보겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/9f296806-ca6c-469c-914a-0cd7a6c6b731/image.png" class="img_ev3q"></p><p>아래 링크에 접속한 후 Github 계정으로 로그인 해주세요.</p><p><a href="https://docs.github.com/en/graphql/overview/explorer" target="_blank" rel="noopener noreferrer">https://docs.github.com/en/graphql/overview/explorer</a></p><div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mutation</span><span class="token plain"> </span><span class="token definition-mutation function" style="color:rgb(80, 250, 123)">AddCommentToIssue</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property-query">addComment</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attr-name" style="color:rgb(241, 250, 140)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token attr-name" style="color:rgb(241, 250, 140)">subjectId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token description string" style="color:rgb(255, 121, 198)">"</span><span class="token description string language-markdown" style="color:rgb(255, 121, 198)">I_kwDOH0hUV85Px2eu</span><span class="token description string" style="color:rgb(255, 121, 198)">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token attr-name" style="color:rgb(241, 250, 140)">body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"안녕하세요 이현진입니다."</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)"># 여러분의 이름으로 바꿔주세요</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token object">commentEdge</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token object">node</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">createdAt</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 코드를 복사해서 붙여넣은 후 이름을 바꿔주고 실행해주세요.</p><p>이제 실제로 댓글이 잘 작성되었는지 확인하기 위해 아래 링크에 접속해서 확인해보세요.</p><p><a href="https://github.com/hyunjinee/GraphQL/issues/1" target="_blank" rel="noopener noreferrer">https://github.com/hyunjinee/GraphQL/issues/1</a></p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/2d67135a-9676-4eb9-a313-f1602bc938a2/image.png" class="img_ev3q"></p><p>위와 같이 댓글이 잘 작성된 것을 볼 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="graphql-in-react">GraphQL in React<a class="hash-link" href="#graphql-in-react" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/90bae2d6-a811-4342-b864-2ac23b84da3a/image.png" class="img_ev3q"></p><p>마지막으로 GraphQL이 React에서 어떤 문제를 해결했는지 알아보겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/d00491c2-9665-4fa7-9a35-9a83a6405ddc/image.png" class="img_ev3q"></p><p>위와같은 블로그 애플리케이션의 구조에서 Posts 컴포넌트와 Profile 컴포넌트 모두 데이터를 불러오는 코드를 갖는 컴포넌트라고 가정해보겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/47e74989-bd9b-408e-b9b0-a4bdec1ccba2/image.png" class="img_ev3q"></p><p>추상화 해서 나타내보면 Posts가 상위 컴포넌트이고 Profile이 하위 컴포넌트이며 각각 데이터를 불러오는 코드를 가지고 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/37b7016b-3cc6-483d-b484-a8fff7a36897/image.png" class="img_ev3q"></p><p>Posts와 Profile은 계층 구조를 가지므로 Profile 컴포넌트는 Posts 컴포넌트가 렌더링이 된 이후에야 데이터 fetching을 시작할 수 있습니다. 위 그림을 보면 Posts는 렌더링이 되었지만 Profile은 데이터 fetching을 시작조차 하지 않은 모습을 볼 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/f2179c5d-b40d-40d1-9ca2-969b291fb542/image.png" class="img_ev3q"></p><p>이런 현상을 <code>Network Waterfall</code>이라고 합니다.
물론 동시에 요청을 보낼 수 있겠지만 데이터를 가져오는 코드가 컴포넌트와 의존성을 가지므로 동시에 요청을 보내는 것 자체가 불가능합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/7c9594a2-3e97-4dd3-a190-243b8b7c448b/image.png" class="img_ev3q"></p><p>물론 위와 같이 데이터를 가져오는 로직을 상위 컴포넌트로 옮기고 <code>props drilling</code>을 하면 해결할 수 있습니다. 하지만 하위 컴포넌트가 여러개라면 상위 컴포넌트가 점점 복잡해질 것입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/85965bf3-62ec-4755-a7d5-3f422369dbbb/image.png" class="img_ev3q"></p><p>무엇이든 복잡한 것을 만들 때는 작은 부분(컴포넌트)으로 나누어 한번에 한 부분만 집중하는 것은 좋은 접근법 입니다. 작은 부분들은 가능하면 서로 의존하지 않게 독립적으로 설계해야 바람직하며, 각 부분별로 테스트 및 재사용이 가능해야합니다.</p><p>GraphQL에서는 각 컴포넌트에 대응하는 데이터를 <code>fragment</code>로 정의할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/1a77b7c0-7812-44a9-a509-243f9224f78c/image.png" class="img_ev3q"></p><p>컴포넌트의 구조를 위와 같이 표현하고 각 컴포넌트가 필요로 하는 데이터 구조를 fragment로 표현합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/e8a6de1e-8b9c-4bd3-9345-9aef1cda182e/image.png" class="img_ev3q"></p><p>이제 각 fragment들을 최상위 컴포넌트의 쿼리에 모두 배치시키고 GraphQL의 이점을 살려 단 한번의 쿼리로 모든 데이터를 받아옵니다.</p><p>이렇게 함으로써 애플리케이션 내에서 데이터흐름을 추적하기 쉬워지며 <code>Network Waterfall</code> 현상도 해결할 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="마치며">마치며<a class="hash-link" href="#마치며" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/5367e6f7-3e23-41a7-9043-4bbff33f2164/image.png" class="img_ev3q"></p><p>GraphQL은 클라이언트에서 서버에 질의를 하기 위한 언어입니다.
GraphQL은 SQL의 경쟁 상대가 아니며, SQL 처럼 데이터베이스에 쿼리를 하기 위해 사용해서는 안됩니다.</p><p>GraphQL는 스키마를 정의하여 클라이언트와 서버가 대화할 수 있게 해줍니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/69bcd0f9-d2a6-4f06-9179-2b198a25234c/image.png" class="img_ev3q"></p><p>만약 백엔드가 다양한 언어로 구성된 여러 서비스로 되어있다면, 리졸버가 여러 서비스와 대화하여 데이터를 가져올 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/c8235b23-d1d1-4234-9533-732c0c2d9618/image.png" class="img_ev3q"></p><p><code>GraphQL의 아름다움은 프론트엔드 개발자가 백엔드를 보지 않아도 된다는 것 입니다.</code> 프론트엔드 개발자는 스키마가 정의되면 백엔드 개발자가 어떻게 개발하든 신경쓰지 않아도 됩니다.</p><p>이것이 GraphQL의 의도입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/41ce9f5e-e5eb-4005-aae4-003be49fd109/image.png" class="img_ev3q"></p><p>GraphQL은 API를 위한 쿼리언어이며, 동시에 런타임이기도 합니다. GraphQL은 스키마를 통해 API에 있는 데이터에 대한 완벽하고 이해하기 쉬운 설명을 제공하고 리졸버를 통해 원하는 필드에 원하는 데이터를 충족시킬 수 있습니다. 또한, 시간이 지남에 따라 API를 쉽게 진화시킬 수 있고 강력한 개발자 도구를 지원합니다.</p><p>데이터들을 엔드포인트에 대응되는 것이 아닌 서로 그래프처럼 연결되어있다고 생각해보면 어떨까요?</p><p><code>Think in graphs, not endpoints.</code></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reference">Reference<a class="hash-link" href="#reference" title="Direct link to heading">​</a></h2><ul><li><a href="https://www.howtographql.com/" target="_blank" rel="noopener noreferrer">How to GraphQL</a></li><li>GraphQL in Action. Samer Buna</li><li><a href="https://velog.io/@hyunjine/Data-Flows-in-React" target="_blank" rel="noopener noreferrer">Data Flows in React</a></li><li><a href="https://www.youtube.com/watch?v=HYgKBvLr49c" target="_blank" rel="noopener noreferrer">컴포넌트, 다시 생각하기</a></li><li><a href="https://graphql-kr.github.io" target="_blank" rel="noopener noreferrer">GraphQL Docs</a></li><li><a href="https://www.apollographql.com/docs/" target="_blank" rel="noopener noreferrer">Apollo Docs</a></li><li><a href="https://velog.io/@devstone/GraphQL-%EA%B8%B0%EC%B4%88-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0" target="_blank" rel="noopener noreferrer">GraphQL 기초 톺아보기</a></li><li><a href="https://tech.kakao.com/2019/08/01/graphql-basic/" target="_blank" rel="noopener noreferrer">GraphQL 개념잡기</a></li><li><a href="https://github.com/hyunjinee/GraphQL" target="_blank" rel="noopener noreferrer">발표 Repo</a></li></ul>]]></content>
        <author>
            <name>이현진</name>
            <uri>https://github.com/hyunjinee</uri>
        </author>
        <category label="GraphQL" term="GraphQL"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[useState vs useRef]]></title>
        <id>useState-vs-useRef</id>
        <link href="https://team-yaza.github.io/blog/useState-vs-useRef"/>
        <updated>2022-07-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[React 프로젝트를 진행하면서 input의 값을 관리할 때 useState로 관리할 것인가, useRef로 관리할 것인가에 대해 팀원과 토론했습니다.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/5c8cfeb8-5f0f-46aa-8cf2-87f00f89f1d1/image.png" class="img_ev3q"></p><p>React 프로젝트를 진행하면서 input의 값을 관리할 때 <code>useState로 관리할 것인가, useRef로 관리할 것인가</code>에 대해 팀원과 토론했습니다.</p><p>이 글은 그 <a href="https://github.com/team-yaza/mozi-client/issues/78" target="_blank" rel="noopener noreferrer">토론</a>에 기반합니다.</p><p>먼저, useState와 useRef를 간단하게 비교하는 것으로 시작해보겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="usestate">useState<a class="hash-link" href="#usestate" title="Direct link to heading">​</a></h2><p>React에서 컴포넌트는 자신의 상태 또는 props가 바뀌면 리렌더링됩니다.
상태를 관리하기 위해 React에서는 <code>useState</code>를 활용합니다.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">initialState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>useState</code>는 상태 유지 값과 그 값을 갱신하는 함수를 반환합니다. <code>setState</code> 함수는 새 state를 받아 컴포넌트 리렌더링 큐에 등록합니다.</p><p>컴포넌트는 다음 렌더링 시에 <code>useState</code>를 통해 반환받은 첫번째 값은 항상 갱신된 최신 state가 됩니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="useref">useRef<a class="hash-link" href="#useref" title="Direct link to heading">​</a></h2><p>Ref는 render 메서드에서 생성된 DOM 노드나 React 엘리먼트에 접근하는 방법을 제공합니다.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">CustomTextInput</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">props</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// textInput은 ref 어트리뷰트를 통해 전달되기 위해서</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// 이곳에서 정의되어야만 합니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> textInput </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useRef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword null nil" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">handleClick</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    textInput</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">focus</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token plain">div</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">input type</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"text"</span><span class="token plain"> ref</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">textInput</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">button onClick</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">handleClick</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain">click me</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">button</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">div</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>React 공식 문서에 의하면 ref의 바람직한 사용 사례는 다음과 같습니다.</p><ul><li>포커스, 텍스트 선택영역, 혹은 미디어의 재생을 관리할 때</li><li>애니메이션을 직접적으로 실행시킬 때</li><li>서드 파티 DOM 라이브러리를 React와 같이 사용할 때</li></ul><p>결국 React에서 ref는 DOM을 조작하기 위해 사용됩니다.
하지만 ref를 다른 용도로 사용할 수도 있습니다. 아래와 예시를 보겠습니다.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> refContainer </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useRef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">initialValue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>useRef</code>는 <code>.current</code> 프로퍼티로 전달된 인자(<code>initialValue</code>)로 초기화된 변경 가능한 ref 객체를 반환합니다.</p><p><code>useRef</code>는 순수 자바스크립트 객체를 생성합니다.
또한 <code>useRef</code>로 만든 객체를 수정하는 것은 컴포넌트의 렌더링과 무관합니다.<br>
<!-- -->다시 말하면, <code>.current</code> 프로퍼티를 변형하는 것이 리렌더링을 발생시키지 않습니다.</p><p>본질적으로 <code>useRef</code>는 <code>.current</code> 프로퍼티에 변경 가능한 값을 담고 있는 <code>상자</code>와 같습니다.
<code>useRef</code>는 상자와 같으므로 <code>useState</code>처럼 컴포넌트 내의 변수 값을 조회, 수정하는 방법으로도 사용할 수 있습니다.</p><p>위 두 사례에 의하면, <code>useRef</code>는 일반적으로 특정 DOM을 지정하여 해당 돔의 속성값을 파악하거나 속성값을 변화시키는 용도로 사용할 수도 있고, 순수 자바스크립트 객체를 반환하기 때문에 값을 저장하는 <code>상자</code>로 사용할 수도 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="usestate-vs-useref">useState vs useRef<a class="hash-link" href="#usestate-vs-useref" title="Direct link to heading">​</a></h2><p><code>useState</code>와 <code>useRef</code>의 사용을 비교해보면 렌더링에서 차이점을 보입니다.</p><p>먼저 useState를 사용해서 input을 만들어 테스트를 해보겠습니다.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">Input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setValue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token plain">input value</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> onChange</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setValue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token maybe-class-name">Input</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/1203cdac-bdb3-4c52-98c5-88113745ab54/image.gif" class="img_ev3q"></p><p>당연하게도 상태가 바뀔 때마다 리렌더링되는 모습을 볼 수 있습니다.</p><p>이제 <code>useRef</code>를 사용해서 input 컴포넌트를 테스트 해보겠습니다.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">Input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> inputRef </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useRef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword null nil" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token plain">input ref</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">inputRef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token maybe-class-name">Input</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/50749d8d-8a16-4c84-9840-2873da6b8073/image.gif" class="img_ev3q"></p><p>애초에 상태로 관리하지 않으므로 리렌더링이 일어나지 않습니다.</p><p>여기서 고민했던 점은 <code>input 값을 변경할 때 렌더링이 필요한가</code>에 대한 부분이었습니다.</p><p>팀원과 제 생각이 같았던 부분은 <code>input을 입력하는 과정에서 렌더링이 이렇게 많이 일어나야하나?</code>라는 생각이었습니다.</p><p>반면 팀원과 제 생각이 달랐던 부분은 다음과 같습니다.</p><ul><li>이현진: 'input의 입력값 또한 어플리케이션의 상태이기 때문에 <code>useState</code>로 관리해야한다'</li><li>팀원: 'input 입력값은 상태가 아니기 때문에 <code>useRef</code>로 리렌더링을 막아야한다.'</li></ul><p>결국 input 값을 관리할 때 <code>useState vs useRef</code>라는 질문은 React에서 <code>input값이 상태인가</code>라는 질문으로 귀결됩니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="생각">생각<a class="hash-link" href="#생각" title="Direct link to heading">​</a></h2><p>제 생각은 아래와 같습니다.</p><p><code>상태란 주어진 시간에 대해 시스템을 나타내는 것으로 언제든지 변경될 수 있는 것</code>입니다.
사용자가 입력하는 값 또한 어플리케이션의 상태라고 할 수 있고, 시간의 흐름에 따라 변하는 input의 값은 <code>useState</code>로 관리해야합니다.</p><p>input을 state로 관리할 때 발생하는 리렌더링에 대한 부분에서는 과연 그 input을 리렌더링하는게 고비용 연산인가라는 의문을 제기하고 싶습니다. input을 타이핑할 때 발생하는 렌더링은 고비용 연산이 아니라고 생각합니다.</p><p>반면 <code>useRef</code>로 만들어진 ref객체는 DOM에 접근할 때나, 매 렌더링시에 만들어줘야하는 고비용 객체나 값을 저장할 때 사용하는 것이 옳다고 생각합니다.</p><p>결론은 <code>input에서 발생하는 사용자의 상호작용 또한 어플리케이션의 상태이므로 상태를 상태답게 관리하기 위해 useState를 사용해야한다.</code> 입니다.</p><p><strong>여러분은 어떻게 생각하시나요?</strong></p><blockquote><p>22.08.03 추가</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="controlleduncontrolled-components">Controlled/Uncontrolled Components<a class="hash-link" href="#controlleduncontrolled-components" title="Direct link to heading">​</a></h2><p>이 글에서 했던 고민이 공식문서에 나와있었습니다.</p><p>우리의 고민은 이 컴포넌트가 <code>Controlled Component</code>인가 <code>Uncontrolled Component</code>인가에 대한 고민이었습니다.</p><p>HTMLElement중에는 상태를 가지고 있는 것들이 있습니다.</p><ul><li>input</li><li>select</li><li>textarea</li></ul><p>이 HTMLElement들의 상태를 누가 관리하느냐에 따라 <code>Controlled Component</code>와 <code>Uncontrolled Component</code>로 나뉩니다.</p><p>엘리먼트를 가지고 있는 컴포넌트가 관리한다면, <code>Controlled Component</code></p><p>엘리먼트의 상태를 관리하지 않고 엘리먼트의 참조만 컴포넌트가 소유한다면, <code>Uncontrolled Component</code>입니다.</p><p>즉, 쉽게 말하면 <code>useState</code>에 의해 상태로 관리하고 있는 컴포넌트를 <code>제어 컴포넌트</code>라고 하고, React가 상태로 추적하고 있지 않은 컴포넌트를 <code>비제어 컴포넌트</code>라고 합니다. <code>비제어 컴포넌트</code>같은 경우 ref를 활용해 실제 DOM에 접근합니다. <code>비제어 컴포넌트</code>는 DOM자체에서 데이터가 다뤄집니다.</p><p>아래는 공식문서에서 인용한 문장입니다.</p><blockquote><p>In a controlled component, form data is handled by a React component.
The alternative is uncontrolled components, where form data is handled by the DOM itself.</p></blockquote><blockquote><p>(번역)
<strong>대부분 경우에 폼을 구현하는데 제어 컴포넌트를 사용하는 것이 좋습니다.</strong>
제어 컴포넌트에서 폼 데이터는 React 컴포넌트에서 다루어집니다.
대안인 비제어 컴포넌트는 DOM 자체에서 폼 데이터가 다루어집니다.</p></blockquote><p>form의 input 상태같은 경우 React가 추적해서 그 값으로 어떤 행동을 할 여지가 있습니다. 예를들어서 로그인 유효성 검사 로직이 state가 변함에 따라 실행되어야하면 <code>제어 컴포넌트</code>를 활용할 수 있습니다.</p><p>반면에, <code>비제어 컴포넌트</code>같은 경우는 실제 DOM을 참조해야하는 경우에 필요합니다. 가장 흔한 경우로 input에 focus를 하는 상황을 예로 들 수 있습니다.</p><p>따라서, <strong>실제 DOM에 접근해야하는 상황이 아니라면 React 컴포넌트가 input의 상태를 관리해야 합니다.(<code>제어 컴포넌트</code>)</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="더-읽을거리">더 읽을거리<a class="hash-link" href="#더-읽을거리" title="Direct link to heading">​</a></h2><ul><li><a href="https://en.reactjs.org/docs/uncontrolled-components.html" target="_blank" rel="noopener noreferrer">비제어 컴포넌트</a></li></ul>]]></content>
        <author>
            <name>이현진</name>
            <uri>https://github.com/hyunjinee</uri>
        </author>
        <category label="React" term="React"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[서비스 워커로 오프라인 우선 받아들이기]]></title>
        <id>offline-first</id>
        <link href="https://team-yaza.github.io/blog/offline-first"/>
        <updated>2022-07-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[본 포스팅은 아래 링크의 만들면서 배우는 프로그레시브 웹 앱 책을 보며 공부한 내용을 스스로 정리한 것 입니다.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/d41e3773-1274-46d1-87ff-7b0181abb749/image.png" class="img_ev3q"></p><p>본 포스팅은 아래 링크의 <strong>만들면서 배우는 프로그레시브 웹 앱</strong> 책을 보며 공부한 내용을 스스로 정리한 것 입니다.</p><p><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=190254386" target="_blank" rel="noopener noreferrer">만들면서 배우는 프로그레시브 웹 앱</a></p><p>실습 코드는 포스팅 맨 아래 링크에 첨부해두었습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="0-오프라인-우선이란">0. 오프라인 우선이란?<a class="hash-link" href="#0-오프라인-우선이란" title="Direct link to heading">​</a></h2><p>웹 앱이 발전해감에 따라 서버에 전적으로 의존했던 기존의 웹 앱에서 많은 기능이 서버에서 클라이언트로 이동하였고, 웹 앱은 데이터 처리, 템플릿 렌더링 등의 작업을 수행하게 되었다.</p><p>그럼에도 불구하고 웹 앱은 여전히 전적으로 서버에 의존하고 있다. 인터넷 연결이 끊어지면 <strong>앱 구동에 실패</strong>할 수 있다는 것이다.</p><p><strong>오프라인 우선(Offline-first)</strong>는 오프라인 상태와 불안정한 인터넷 상태에서 발생하는 문제는 치명적인 오류가 아니라 웹 앱이 작동하는 동안 언제든지 발생할 수 있는 상태라는 것을 인식하는 것에서 부터 시작한다.</p><p>즉, 오류로써 이것을 처리하는게 아니라 하나의 상태로써 관리를 해야한다는 뜻이다.</p><p>오프라인 우선을 받아들인다는 것은 사용자가 오프라인일때 앱의 일부 기능이 작동하지 않을 수 있지만 그 외의 대부분 기능은 계속 작동해야한다는 것이다.</p><p>그렇기 위해서는 연결 상태에 대한 변경 사항을 우아하게 처리할 수 있어야 한다..</p><p>인터넷 연결이 끊기는 상황에서 사용자에게 일부 기능이 작동하지 않을 수 있고, 사용자가 찾고 있는 데이터가 최신이 아닌 몇 시간 지난 데이터임에도 여전히 많은 기능을 제공하고 있음을 알려야 한다.</p><p>오프라인에서 완전히 구동되는 웹 앱을 구축하고 인터넷 연결을 우아하게 관리하면, 사용자에게 이 앱을 계속 사용해도 된다는 신뢰와 데이터도 손실되지 않을 것이라는 확인을 줄 수있다.</p><p>정리하면 <strong>`오</strong>프라인 우선` 이란 <strong>사용자에게 있어 현재의 네트워크 상태에서 항상 최상의 경험을 제공하는 것을 의미</strong>한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-캐싱-패턴">1. 캐싱 패턴<a class="hash-link" href="#1-캐싱-패턴" title="Direct link to heading">​</a></h2><p>앞선 포스팅에서는 캐시를 하는 방법에 대해 공부를 해보았다.</p><p>당연하게도 서비스가 제공하는 기능에 따라 캐싱하는 데이터도 바뀌어야하고, 그렇다면 어떻게 캐싱 할 것인지 <strong>캐싱 패턴</strong>도 달라져야 할 것이다.</p><p><code>오프라인 우선</code> 을 적용하기 앞서 이를 위한 다양한 캐싱 패턴에 대해 알아보자.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cache-only-캐시만-사용">Cache Only (캐시만 사용)<a class="hash-link" href="#cache-only-캐시만-사용" title="Direct link to heading">​</a></h3><p>모든 리소스 요청을 캐시를 통해 처리한다. 캐시에서 응답을 찾을 수 없을 경우 요청은 실패한다.</p><p>로고나 아이콘, 스타일시트 같은 정적 리소스를 처리하는 데 유용하다.</p><p>만약 리소스의 내용을 변경해야 하는 경우, 정적 리소스 파일의 이름을 변경한 후 캐시에 저장한다.</p><p>이 방법은 서비스 워커와 상관없이 이전부터 자주 사용되던 캐싱 패턴과 유사하다. 새로운 버전을 배포할 때마다 모든 정적 리소스 파일의 이름을 변경하고, 캐시 만료 날짜를 아주 길게 혹은 무기한으로 서버를 설정하는 방법과 비슷하다.</p><p>만약 파일 이름을 변경하는 것이 부담스럽다면 새로운 버전의 서비스 워커를 릴리즈 하고, 서비스 워커의 활성화 이벤트 동안 필요한 파일을 다시 가져와 캐시에 저장하면 된다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cache-falling-back-to-network-캐시-실패하는-경우만-네트워크">Cache, falling back to network (캐시 실패하는 경우만 네트워크)<a class="hash-link" href="#cache-falling-back-to-network-캐시-실패하는-경우만-네트워크" title="Direct link to heading">​</a></h3><p><code>Cache Only</code> 와 비슷하게 캐시에 저장된 콘텐츠를 먼저 찾지만, 못찾으면 네트워크로 콘텐츠를 요청한다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> response </span><span class="token operator">||</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="network-only-네트워크만-사용">Network Only (네트워크만 사용)<a class="hash-link" href="#network-only-네트워크만-사용" title="Direct link to heading">​</a></h3><p>웹의 전통적인 모델. 모든 리소스를 네트워크에서 가져오는 경우 한마디로 캐시를 안하는 것.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="network-falling-back-to-cache-네트워크-실패하는-경우만-캐시">Network, falling back to cache (네트워크 실패하는 경우만 캐시)<a class="hash-link" href="#network-falling-back-to-cache-네트워크-실패하는-경우만-캐시" title="Direct link to heading">​</a></h3><p>네트워크로 요청을 전달하고 실패하는 경우만 캐시로부터 응답을 찾는다. 캐시에서도 못 찾으면 요청은 실패한다.</p><p>사용자는 항상 현재의 연결 상태에서 가장 최신의 콘텐츠를 내려받게 된다. 따라서 자주 변경되는 콘텐츠나 가장 최신 응답을 보여주는 것이 중요한 상황에서 유용하다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cache-then-network-캐시-이후-네트워크">Cache, then network (캐시 이후 네트워크)<a class="hash-link" href="#cache-then-network-캐시-이후-네트워크" title="Direct link to heading">​</a></h3><p>네트워크에서 최신 버전을 체크하는 동안 캐시에서 데이터를 바로 보여주고, 네트워크 응답을 받으면 캐시보다 최신 버전인 경우 페이지를 업데이트 한다.</p><p>해당 방법은 좋은 방법은 맞지만 구현 비용이 올라가고, 네트워크 응답이 길어지는 경우 사용자 경험 측면에서 좋지 않을 수 있다.</p><p>예를 들어 캐시된 콘텐츠를 표시하여 사용자가 상호작용하는 도중에 네트워크 응답이 들어오는 경우 사용자 입장에서는 잘 쓰고 있는데 갑자기 페이지가 업데이트 되었다고 느끼게 될 것 이다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="generic-fallback-기본-대체-리소스">Generic fallback (기본 대체 리소스)<a class="hash-link" href="#generic-fallback-기본-대체-리소스" title="Direct link to heading">​</a></h3><p>사용자가 요청하는 콘텐츠가 캐시에 없고, 네트워크도 사용 불가능 할 때 에러를 반환하는 대신 캐시에서 default fallback을 반환한다.</p><p>예를 들어 사용자의 프로필 이미지가 캐시에 없고 네트워크도 사용이 불가능한 경우 서비스에 깨진 이미지를 보여주는게 아니라 기본 프로필 이미지를 보여주는 것이다.</p><p>이 패턴은 보통 마지막 <code>fallback</code> 으로 다른 패턴들과 함께 사용된다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> response </span><span class="token operator">||</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/default.png"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-캐싱-패턴을-응용해서-사용해보자">2. 캐싱 패턴을 응용해서 사용해보자<a class="hash-link" href="#2-캐싱-패턴을-응용해서-사용해보자" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cache-on-demand-요청에-따라-캐시">Cache on demand (요청에 따라 캐시)<a class="hash-link" href="#cache-on-demand-요청에-따라-캐시" title="Direct link to heading">​</a></h3><p><code>cache, falling back to network</code> 를 확장하여 캐시에 없어서 네트워크에 요청하는 경우 해당 응답도 캐싱하는 방법이다.</p><p>다음에 또 리소스가 요청되면 이번에는 캐싱된 데이터에서 응답을 주게 될 것이다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_NAME</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cachedResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          cachedResponse </span><span class="token operator">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">networkResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">put</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> networkResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">clone</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> networkResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><aside>💡 **왜 networkResponse를 클론해서 캐시에 넣어주었을까?**<p>Response는 <strong>스트림이며, 한번만 사용가능</strong>하다. 따라서 캐시해주는데 한번 사용해버리면 스트림이 사라져 버린다.
따라서 캐시하는데 한번, 응답을 주는데 한번 이렇게 두번 이상 요청을 사용하려면 응답을 그냥 사용하는게 아니라 복제해서 사용해야한다.</p></aside><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cache-falling-back-to-network-with-frequent-updates-캐시-하고-이후-네트워크-사용해-캐시-업데이트">Cache, falling back to network with frequent updates (캐시 하고 이후 네트워크 사용해 캐시 업데이트)<a class="hash-link" href="#cache-falling-back-to-network-with-frequent-updates-캐시-하고-이후-네트워크-사용해-캐시-업데이트" title="Direct link to heading">​</a></h3><p>최신버전을 보여주는 것보다 빠른 응답이 더 중요한 리소스의 경우 cache, falling back to network 패턴을 개선하여 요청한 리소스가 있을 때에도 일단은 캐시된 데이터를 보여주고 이후에 요청한 리소스를 캐시하도록 할 수 있다.</p><p>즉, 캐시된 데이터를 보여준 이후에 최신 데이터를 다시 캐시하는 것이다.</p><p>빠른 응답과 비교적 최신 응답의 이점을 합친 패턴이라고 할 수 있다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_NAME</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cachedResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> fetchPromise </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token parameter">netWorkResponse</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">put</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> netWorkResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">clone</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> netWorkResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cachedResponse </span><span class="token operator">|</span><span class="token plain"> fetchPromise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="network-falling-back-to-cache-with-frequent-updates-네트워크-실패시-캐시-사용-및-빈번한-캐시-업데이트">Network, falling back to cache with frequent updates (네트워크 실패시 캐시 사용 및 빈번한 캐시 업데이트)<a class="hash-link" href="#network-falling-back-to-cache-with-frequent-updates-네트워크-실패시-캐시-사용-및-빈번한-캐시-업데이트" title="Direct link to heading">​</a></h3><p>항상 최신 리소스를 제공하는 것이 중요한 경우에는 network, falling back to cache 패턴 작동에 약간의 변화를 줘서 사용할 수 있다.</p><p>항상 네트워크를 이용해 최신 리소스를 가져오고 성공하는 경우 캐시를 업데이트 해준다. 캐시를 사용하는 경우는 네트워크 요청에 실패하는 경우만 사용한다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    caches</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_NAME</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">netWorkRequest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">put</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> netWorkRequest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">clone</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-앱-쉘-아키텍쳐">3. 앱 쉘 아키텍쳐<a class="hash-link" href="#3-앱-쉘-아키텍쳐" title="Direct link to heading">​</a></h2><p>앱 쉘 아키텍쳐는 앱에서 가장 기본적 인터페이스를 표시하는 데 필요한 리소스와 기본 로직을 분리하도록 권장한다.</p><p>사용자에게 최대한 빨리 앱 쉘을 표시 할 수 있도록 가능한 가볍게 만든 쉘을 우선 렌더링하여 보여주며, 이후 콘텐츠와 나머지 추가 기능은 로딩이 완료되어 사용 가능할 때 덧붙이게 된다.</p><p>화면에 나중에 보여지게 될 부분보다 지금 화면에 보여지는 디자인 구조와 컨텐츠를 더 높은 우선 순위로 처리해야 한다.</p><p>앱 쉘에 가장 큰 목표는 의미 있는 경험을 가능한 한 빨리 사용자에게 제공하는 것이다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/d4458e1d-c39c-47a0-bd83-d601de19b08f/image.png" class="img_ev3q"> <a href="https://mixwithmarketing.com/2022/01/what-is-app-shell-android/" target="_blank" rel="noopener noreferrer">사진 출처</a></p><p>먼저 앱쉘을 사용자에게 빠르게 제공하고, 이후에 데이터를 네트워크로 가져오든 캐시로 가져오든 해서 내부 컨텐츠 부분을 채우게 되는 것이다.</p><p>위에서 열심히 이야기한 다양한 캐싱패턴을 이용하여 데이터에 따라 적절하게 구현 할 수 있다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-link">3. Link<a class="hash-link" href="#3-link" title="Direct link to heading">​</a></h2><p><a href="https://github.com/TalAter/gotham_imperial_hotel" target="_blank" rel="noopener noreferrer">실습 코드</a></p>]]></content>
        <author>
            <name>유찬희</name>
            <uri>https://github.com/HanCiHu</uri>
        </author>
        <category label="PWA" term="PWA"/>
        <category label="Service Worker" term="Service Worker"/>
        <category label="Cache Storage API" term="Cache Storage API"/>
        <category label="offline-first" term="offline-first"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[서비스워커의 생명 주기와 캐시 관리]]></title>
        <id>life-cycle-and-cache-controll</id>
        <link href="https://team-yaza.github.io/blog/life-cycle-and-cache-controll"/>
        <updated>2022-07-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[본 포스팅은 아래 링크의 만들면서 배우는 프로그레시브 웹 앱 책을 보며 공부한 내용을 스스로 정리한 것 입니다.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/d41e3773-1274-46d1-87ff-7b0181abb749/image.png" class="img_ev3q"></p><p>본 포스팅은 아래 링크의 <strong>만들면서 배우는 프로그레시브 웹 앱</strong> 책을 보며 공부한 내용을 스스로 정리한 것 입니다.</p><p><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=190254386" target="_blank" rel="noopener noreferrer">만들면서 배우는 프로그레시브 웹 앱</a></p><p>이번 포스팅부터 사용할 실습 코드는 포스팅 맨 아래 링크에 첨부해두었습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="0-서비스워커의-생명주기를-알아보기-전에">0. 서비스워커의 생명주기를 알아보기 전에…<a class="hash-link" href="#0-서비스워커의-생명주기를-알아보기-전에" title="Direct link to heading">​</a></h2><p>서비스 워커에 코드를 다음과 같이 작성하고 실행을 시켜보자</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"install"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"install"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"activate"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"activate"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"hi"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">includes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"bootstrap"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Fetch request for"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">".hotel-slogan { background: green!important; } nav{display:none}"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">headers</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text/css"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/ac6c5c2b-3da8-4c52-a06f-9571db97f91c/image.png" class="img_ev3q"></p><p>첫번째 실행에는 <code>install</code>, <code>activate</code>가 콘솔에 찍혔고, 그 이후에 등록이 된 것을 확인 할 수 있다.</p><p>그런데 <code>fetch</code> 요청에 대한 것은 하나도 실행되지 않았는데, 이 상태에서 새로고침을 한번 눌러보자</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/0f3efc76-080e-47b3-bfc6-8330d3308390/image.png" class="img_ev3q"></p><p>우리의 페이지 스타일이 바뀌었고 콘솔도 잔뜩 찍힌것을 볼 수 있다.</p><p>서비스 워커가 <code>fetch 이벤트</code>를 받기 위해 새로고침을 한 번 더 해야했던 이유는 무엇일까?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-서비스워커의-생명주기-life-cycle">1. 서비스워커의 생명주기 (Life Cycle)<a class="hash-link" href="#1-서비스워커의-생명주기-life-cycle" title="Direct link to heading">​</a></h2><p>페이지가 새로운 서비스 워커를 등록하려면 여러 단계의 상태를 거쳐야 한다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/b8ac459f-79e8-4ad6-a399-bd3106f17375/image.png" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="설치-중-installing">설치 중 (Installing)<a class="hash-link" href="#설치-중-installing" title="Direct link to heading">​</a></h3><p><code>navigator.serviceWorker.register</code> 를 사용하여 새로운 서비스 워커를 등록할 때, 자바스크립트가 다운로드되고, 파싱되고 나면, <strong>서비스 워커</strong>는 <code>설치 중 상태</code>에 들어가게 된다.</p><p>설치가 성공적으로 이루어지면, <code>설치됨 상태</code>가 되고, 설치 중 에러가 발생하면, 페이지를 새로고침하여 서비스 워커를 다시 등록하거나, 그렇지 않으면 <code>중복 상태</code>로 빠져버리게 된다.</p><p><code>Install 이벤트</code> 콜백 내에서 <code>waitUntil 함수</code>를 사용하여 설치 중 상태를 연장 할 수 있다.</p><p>프로미스가 리졸브 되면 그때 <code>설치 됨 상태</code>가 되고, 설치 과정이 실패하면 <code>중복 상태</code>로 빠지게 된다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="설치됨대기중-installedwaiting">설치됨/대기중 (Installed/waiting)<a class="hash-link" href="#설치됨대기중-installedwaiting" title="Direct link to heading">​</a></h3><p>서비스 워커가 성공적으로 설치되면, <code>설치됨 상태</code>로 넘어가게 되고, 현재 활성화 되어있는 다른 서비스 워커가 앱을 제어하고 있지 않으면, 바로 <code>활성화 중 상태</code>로 전환된다.</p><p>앱을 제어하고 있는 경우에는 <code>대기 중 상태</code>가 유지 된다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="활성화-중-activating">활성화 중 (Activating)<a class="hash-link" href="#활성화-중-activating" title="Direct link to heading">​</a></h3><p>서비스 워커가 활성화되어 <strong>앱을 제어하기 전</strong>, <code>activate 이벤트</code>가 발생한다.</p><p><code>설치 중 상태</code>와 비슷하게, <code>활성화 중 상태</code> 또한 <code>waitUntil 함수</code>를 사용하여 호출을 연장 할 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="활성화-됨-activated">활성화 됨 (Activated)<a class="hash-link" href="#활성화-됨-activated" title="Direct link to heading">​</a></h3><p>서비스 워커가 활성화 되면 페이지를 제어하고, <code>fetch 이벤트</code>와 같은 동작 이벤트를 받을 준비가 된다.</p><p>서비스 워커는 페이지 로딩이 시작하기 <strong>전에만</strong> 페이지 제어 권한을 가져올 수 있다. 즉, 서비스 워커가 <strong>활성화 되기 전</strong>에 로딩이 시작된 페이지는 서비스 워커가 <strong>제어할 수 없다.</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="중복-redunant">중복 (Redunant)<a class="hash-link" href="#중복-redunant" title="Direct link to heading">​</a></h3><p>서비스 워커가 등록중, 설치 중 실패하거나 새로운 버전으로 교체되면 <code>중복 상태</code>가 된다.</p><p>이 상태의 서비스 워커는 앱에 아무런 영향을 미치지 못한다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="0번에서-어떤-일이-일어났을까">0번에서 어떤 일이 일어났을까?<a class="hash-link" href="#0번에서-어떤-일이-일어났을까" title="Direct link to heading">​</a></h3><p>사용자가 처음 사이트에 방문하면 앱은 서비스워커를 등록합니다. 이때 <code>install 이벤트</code>가 발생하게 되고, 처음 방문했기 때문에 제어 중인 서비스 워커가 없어서 바로 <code>activate 이벤트</code>가 발생하게 된다. 마지막으로 서비스 워커는 <code>활성화 됨 상태</code>로 들어가 페이지를 제어할 준비가 되게 된다.</p><p>하지만 서비스 워커가 설치되는 동안 페이지는 이미 로딩과 렌더링을 시작했다. 서비스 워커가 <strong>활성화</strong> 된다고 하더라도, 이미 로딩과 렌더링을 시작한 페이지는 제어할 수는 없다. 즉, 페이지를 다시 새로고침해야 페이지 로딩 전에 이미 설치 된 서비스 워커가 활성화될 수 있다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-서비스-워커의-수명과-waituntil">2. 서비스 워커의 수명과 waitUntil<a class="hash-link" href="#2-서비스-워커의-수명과-waituntil" title="Direct link to heading">​</a></h2><p>서비스 워커가 성공적으로 설치 되고 활성화 되었다면, 서비스 워커는 브라우저 탭이나 윈도우 창에 묶여있지 않고 언제든 이벤트에 응답 할 수 있기때문에 서비스워커가 늘 돌고 있는걸까?</p><p>당연히 그렇지 않다. 그렇게 된다면 서비스 워커를 많이 등록할수록 성능이 급격히 떨어지게 될 것이다.</p><p>서비스 워커의 수명은 서비스 워커가 처리하는 이벤트와 직접적으로 연관되어 있다. 서비스 워커 범위 내에서 이벤트가 발생한다면 서비스 워커는 활성화 되고 <strong>이벤트를 처리한 후 종료</strong>된다.</p><p>다시말해 사용자가 사이트를 방문할 때, 서비스 워커가 시작되고, 페이지에서 이벤트 처리를 <strong>완료하는 즉시 종료</strong>가 된다. 다른 이벤트가 나중에 들어온다면 서비스 워커는 <strong>다시 시작되고 완료되는 즉시 종료</strong>된다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"push"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/updates"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">registeration</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">showNotification</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 코드를 함께 확인해보자.</p><p>push 이벤트가 발생하면, 서버로부터 업데이트를 가져오기 위해 시도하고, 응답을 받게 되면 업데이트를 사용자에게 알리게 되는 코드이다.</p><p>하지만 이 코드에는 문제가 있다.</p><p>업데이트를 확인하기 위해 fetch 요청이 비동기적으로 진행되는 동안 이벤트 <strong>리스너 코드의 실행이 종료</strong>된다.</p><blockquote><p><strong>fetch</strong>에서는 <strong>pending</strong>을 즉시 리턴하고, <strong>resolve</strong>가 되면 <strong>callback function</strong>을 실행하도록 <strong>태스크 큐</strong>에 넣지만 <strong>fetch</strong>를 리턴하면서 이미 리스너 자체가 끝나서 사라져있기때문에 업데이트를 표시할 주체가 사라지게 되고 따라서 정상적으로 작동하지 못하게 된다.</p></blockquote><p>브라우저가 서버스 워커 작업이 완료될 때까지 기다리게 하려면 <code>waitUntil</code>을 사용하면 된다.</p><p>서비스 워커의 수명은 실행 중인 이벤트 리스너 코드와 직접적으로 연관되어 있다.</p><p>waitUntil을 사용하면 필요한 작업이 완료될 때까지 이벤트 리스너 코드를 연장하여 서비스 워커가 종료되는 것을 방지할 수 있다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"push"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">waitUntil</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/updates"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">registration</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">showNotification</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"New Update"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 예제 코드는 <code>waitUntil</code>을 호출하여 프로미스가 <code>resolve</code> 되거나 <code>reject</code> 될 때까지 <code>push 이벤트 리스너</code>가 종료되지 않도록 하게되고, 따라서 서비스 워커의 수명도 함께 연장된다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-서비스-워커-업데이트-하기">3. 서비스 워커 업데이트 하기<a class="hash-link" href="#3-서비스-워커-업데이트-하기" title="Direct link to heading">​</a></h2><p>코드를 아래와 같이 바꾸고 새로고침을 눌러보자</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"install"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"install"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"activate"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"activate"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"hi"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">includes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"bootstrap"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Fetch request for"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">".hotel-slogan { background: red!important; } nav{display:none}"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">headers</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text/css"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>아무리 눌러도 초록색인 배경이 빨간색으로 바뀌지 않는다.. 왜그러는 걸까?</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/79ff2af2-0e53-45d1-943a-83a399a09a00/image.png" class="img_ev3q"></p><p>크롬의 개발자 도구에서 서비스 워커가 어떻게 돌아가고 있는지 확인해보자.</p><p>아무리 새로고침을 눌러도 대기중인 <strong>#370 서비스 워커</strong>가 <code>activated</code> 되지 않는다.</p><p><code>background: green</code>인 <strong>#369 서비스 워커</strong>가 계속 활성화 중이기 때문이다.</p><p>페이지를 새로고침 하게 되면 해당 페이지는 서비스 워커 스크립트에 대한 업데이트가 있는지 확인하고, 업데이트가 있다면 새로운 서비스 워커를 <strong>설치(install)</strong> 하지만 바로 교체되지 않고 <strong>대기중 (waiting)</strong> 상태에 남게 된다.</p><p>기존의 서비스 워커의 범위에 해당하는 모든 탭과 윈도우 창이 종료되거나, 범위를 벗어난 새로운 페이지로 이동 할 때까지 새로운 서비스 워커는 <strong>대기 중 상태를 유지</strong>하게 된다.</p><p>활성화된 서비스 워커가 제어하는 페이지가 더 이상 열려 있지 않을때에만, 활성화되어 있던 이전의 서비스 워커가 <strong>중복 상태</strong>가 되고 새 서비스 워커가 <strong>활성화</strong> 되게 된다.</p><p>탭을 닫고 다시 열거나 다른 사이트에 접속했다가 뒤로가기를 누르면 이제서야 배경 색이 바뀌는 것을 확인 할 수 있다. (서비스 워커도 <strong>#370</strong>이 활성화 된 것도 확인 할 수 있다.)</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/7ef30aa2-5571-4a55-bf57-d35fae523b13/image.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-캐시-관리-및-이전-캐시-제거">4. 캐시 관리 및 이전 캐시 제거<a class="hash-link" href="#4-캐시-관리-및-이전-캐시-제거" title="Direct link to heading">​</a></h2><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_NAME</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"gih-cache-v2"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">CACHED_URLS</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/index-offline.html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/css/gih-offline.css"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/img/jumbo-background-sm.jpg"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/img/logo-header.png"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"install"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">waitUntil</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_NAME</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addAll</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">CACHED_URLS</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">headers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">get</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"accept"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">includes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"text/html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/index-offline.html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>다음과 같은 코드를 한번 살펴보자.</p><p>맨 첫번째 줄처럼 캐시명에 버전 넘버를 달고 파일이 변경 될 때마다 버전 숫자를 증가시키는 방식으로 캐시를 관리한다고 하면 다음 두가지 이점이 있다.</p><ol><li><p>활성화된 서비스 워커를 새로운 서비스 워커로 바꿔 설치해야 함을 알 수 있다.</p></li><li><p>각 버전에 서비스 워커에 해당하는 별도의 캐시를 생성 할 수 있다.</p><p>서비스 워커가 업데이트 되어 캐시 해주는 파일이 달라졌기 때문에 이전의 캐시 내역을 모두 덮어버린다고 하면 예상치 못한 오류를 만났을때 대처가 힘들 수 있다.</p></li></ol><p>각 서비스워커 마다 캐시가 있는게 바람직하다고는 하지만 생성만 해줄 뿐 오래된 캐시를 삭제해주지 않는다면 공간이 부족해져 버리는 것은 시간문제일 것이다.</p><p>이를 해결하기 위해 다음 두 함수에 대해 알아보자</p><p><code>caches.delete(cacheName)</code> : 첫 번째 인수로 캐시명을 받고 해당 캐시를 삭제한다.</p><p><code>caches.keys()</code> : 접근 가능한 모든 캐시의 이름을 받아온다. 캐시명 배열을 resolve 하는 프로미스를 반환한다.</p><p>오래된 캐시는 <strong>중복 상태</strong>에 빠진 서비스 워커에 해당하는 캐시라고 생각해도 된다. 왜냐하면 한번 <strong>중복 상태에 빠진 서비스워커는 돌아올수 없기</strong> 때문이다.</p><p>따라서 우리는 새로운 서비스 워커를 설치하면 그에 해당하는 캐시를 생성 할 것이고, 해당 서비스 워커가 활성화 되면 기존에 활성화 되었던 서비스 워커에 대한 캐시는 지우도록 캐시를 관리할 예정이다.</p><p>위에 적어둔 코드는 새로운 서비스 워커를 설치하면 그에 해당하는 캐시를 잘 생성해주고 있기 때문에 활성화 되면 기존에 활성화 되었던 서비스 워커에 대한 캐시를 지우도록 하는 로직만 추가해주면 된다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"activate"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">waitUntil</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">keys</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cacheNames</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token known-class-name class-name">Promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">all</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        cacheNames</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cacheName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_NAME</span><span class="token plain"> </span><span class="token operator">!==</span><span class="token plain"> cacheName </span><span class="token operator">&amp;&amp;</span><span class="token plain"> cacheName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">startsWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"gih-cache"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">delete</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">cacheName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 코드를 살펴보면 서비스 워커가 <code>activate 상태</code>에 들어가기 전에 모든 캐시를 돌면서 현재 <code>cacheName</code>과 다른 <code>cacheName</code>을 가진 캐시(이전 버전의 캐시)를 찾아서 삭제한다. 단, 서비스 워커와 상관이 없는 완전히 다른 곳에서 생성한 캐시를 삭제하지 않도록 해당 캐시명이 <code>gih-cache</code>로 시작하는지 확인해준다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-캐시-관리-개선하기">5. 캐시 관리 개선하기<a class="hash-link" href="#5-캐시-관리-개선하기" title="Direct link to heading">​</a></h2><p>완벽할 것 같은 위의 캐시 관리도 실은 부족한 점이 남아있다.</p><p>캐시를 생성할 때 항상 응답이 같을 수 밖에 없는 캐시, <code>bootstrap</code> 같은 요청에 대한 캐시는 항상 응답이 같을텐데 매번 새롭게 캐싱을 해주고 있다.</p><p>지정된 요청에 대한 캐싱은 이전 캐시 기록을 쓸 수는 없을까?</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_NAME</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"gih-cache-v6"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> immutableRequests </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> mutableRequests </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/index-offline.html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/css/gih-offline.css"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/img/jumbo-background-sm.jpg"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/img/logo-header.png"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"install"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">waitUntil</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_NAME</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> newImmutableRequests </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token known-class-name class-name">Promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">all</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        immutableRequests</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">put</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              newImmutableRequests</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token known-class-name class-name">Promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addAll</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">newImmutableRequests</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">concat</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">mutableRequests</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>다음과 같은 코드를 살펴보면 모든 immutable한 request에 대해 만약 캐시에 있다면 해당 정보를 캐시에 <code>put</code>으로 바로 넣어주고 없다면 <strong>처음 들어온 immutable한 요청</strong>이기 때문에 <code>newImmutable 배열</code>에 넣고 마지막에 <code>newImmutableRequests 배열</code>과 <code>mutableRequests 배열</code>을 <code>concat</code>으로 합쳐서 캐시에 넣어준다.</p><p>이렇게 하면 이전 캐시의 리소스까지 더 완벽하게 사용할 수 있게 된다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-link">6. Link<a class="hash-link" href="#6-link" title="Direct link to heading">​</a></h2><p><a href="https://github.com/TalAter/gotham_imperial_hotel" target="_blank" rel="noopener noreferrer">실습 코드 링크</a></p>]]></content>
        <author>
            <name>유찬희</name>
            <uri>https://github.com/HanCiHu</uri>
        </author>
        <category label="PWA" term="PWA"/>
        <category label="Service Worker" term="Service Worker"/>
        <category label="Cache Storage API" term="Cache Storage API"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[웹은 어떻게 발전했는가]]></title>
        <id>웹은-어떻게-발전했는가</id>
        <link href="https://team-yaza.github.io/blog/웹은-어떻게-발전했는가"/>
        <updated>2022-07-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[소프트웨어 마에스트로 컨퍼런스 발표 (22.05.10)]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/9e3546c1-e4fb-4f2c-8962-6e091b55048b/image.png" class="img_ev3q"></p><blockquote><p>소프트웨어 마에스트로 컨퍼런스 발표 (22.05.10)
소프트웨어 마에스트로 세미나(야간자율학습 팀) 발표 (22.07.03)
CNU SW Academy 발표 (22.07.06)
<a href="https://github.com/hyunjinee/storyofweb" target="_blank" rel="noopener noreferrer">발표 REPO</a></p></blockquote><p>안녕하세요. 프론트엔드 개발자 이현진입니다.
오늘 이야기할 주제는 '웹은 어떻게 발전했는가'입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/f451b560-f8b4-4c5b-9198-dd203946eea4/image.png" class="img_ev3q"></p><p>발표는 우선 웹의 역사를 먼저 살펴보고, 그 후에는 브라우저에 관해서 이야기 해보고, 마지막으로 렌더링 프로세스에 대해서 이야기 해보려고 합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/c7303f7b-52cf-4862-a14d-a026263f1432/image.png" class="img_ev3q"></p><p>인터넷과 웹은 같을까요? 다를까요?</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/1a856237-748d-4467-a16d-c0e534ac846e/image.png" class="img_ev3q"></p><p>다릅니다.
인터넷이 도시이면 웹은 그 도시 위에있는 건물 하나입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/ad17e156-1695-4854-b61c-d339647dc250/image.png" class="img_ev3q"></p><p>인터넷이 운영체제라면 웹은 그 위에서 실행되는 프로그램 하나입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/6bff2517-5687-40d3-bf01-7ce74efcd92d/image.png" class="img_ev3q"></p><p>인터넷이라는 전체안에 웹이라는 부분이 존재하고 웹과 동급인 여러가지 서비스들이 있고 이 세가지 이외에도 수많은 서비스들이 존재합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/1609430d-13f3-4287-a088-61c91cc00bba/image.png" class="img_ev3q"></p><p>이제 웹이야기를 해보겠습니다. 이분은 웹의 아버지라고 불리는 분입니다. (팀 버너스 리)</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/4a9dc774-df73-466f-9bee-6b2181fd176e/image.gif" class="img_ev3q"></p><p>팀 버너스 리는 1990년 10월에 세계 최초로 웹페이지를 만드는 편집기를 만듭니다.
바로 다음달인 11월에 세계 최초의 웹 브라우저인 World Wide Web이라는 프로그램을 만듭니다. 이 프로그램은 위와 같이 생겼습니다.<br>
<!-- -->또 다음달인 12월 24일 팀 버너스리는 웹서버라는 프로그램을 만들고, 그 프로그램이 설치되어있는 컴퓨터에 <a href="http://info.cern.ch" target="_blank" rel="noopener noreferrer">info.cern.ch</a>라고 하는 주소를 부여합니다. 접속하면 위와 같이 나옵니다.
웹의 고향에 오신 것을 환영합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/3d0572e0-c901-46a2-a89d-ba32f4570a43/image.png" class="img_ev3q"></p><p>이제 현대의 웹으로 잠깐 점프를 하도록 하겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/dcc8ca4a-1af8-4092-9df6-1c78908472f8/image.png" class="img_ev3q"></p><p>오늘날의 웹은 크게 SPA(Single Page Application)과 MPA(Multi Page Application)으로 나뉩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/aad927a2-1937-44fa-b0d4-8469cf67c263/image.gif" class="img_ev3q"></p><p>위 홈페이지는 MPA입니다. 링크를 클릭할 때마다 깜빡거리는 현상을 볼 수 있습니다. MPA는 탭을 이동할 때마다 서버로부터 새로운 html을 받아와서 페이지 전체를 새로 렌더링하는 전통적인 웹 페이지 구성 방식입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/fa89b134-8b0e-4e67-b906-77d008904c87/image.png" class="img_ev3q"></p><p>이런 MPA의 단점 때문에 AJAX가 등장하면서부터는 원하는 부분만 클라이언트에서 동적으로 갈아끼울 수 있고 화면 깜빡임도 없는 SPA의 형태로 점차 바뀌게 되었습니다.</p><p>AJAX란 Asynchronous JavaScript And XML의 약자로 비동기 자바스크립트와 XML을 말합니다. 간단히 말하면, 서버와 통신하기 위해 XMLHttpRequest 객체를 사용하는 것을 말합니다. JSON, XML등 다양한 포맷을 주고 받을 수 있습니다. AJAX의 강력한 특징은 페이지 전체를 리프레쉬하지 않고도 수행되는 <code>비동기성</code>입니다. 이러한 비동기성을 통해 사용자의 이벤트가 있으면 전체 페이지가 아닌 일부분만을 업데이트 할 수 있게 해줍니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/25f6ba0d-972c-4dd0-88cf-756abd005222/image.png" class="img_ev3q"></p><p>SPA는 하나의 페이지로 구성된 웹 애플리케이션입니다. 오늘날의 SPA는 대부분 React, Vue, Angular를 활용해서 만들어집니다. SPA는 웹 애플리케이션에 필요한 모든 정적 리소스를 최초 한번에 다운도르 합니다. 그 이후 새로운 페이지 요청이 있을 경우, 페이지 갱신에 필요한 데이터만 전달받아 페이지를 갱신합니다. 어떤 링크를 클릭한다해도 그에 관련된 모든 파일을 다운로드 받는게 아니라, 필요한 정보만 받아서 그 정보를 기준으로 업데이트 할 뿐입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/17fc86e7-d431-4dd3-872b-0f370600e761/image.gif" class="img_ev3q"></p><p>위 홈페이지는 미니 프로젝트 때 만들었던 SPA입니다. 링크를 눌러도 화면의 깜빡임 없이 바로바로 반응하는 것을 볼 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/45029a0b-2b4c-43ae-9808-23e9e9f545eb/image.png" class="img_ev3q"></p><p>일반적으로 SPA에서는 렌더링 방식으로 CSR을 MPA에서는 렌더링 방식으로 SSR을 사용합니다.
SPA는 웹 애플리케이션에 필요한 정적 리소스를 처음 한번만 다운로드하고 그 이후 새로운 페이지 요청이 있을 때만 데이터를 전달받아서 클라이언트에서 페이지를 갱신하기 때문에 자연스럽게 CSR을 사용하게 되고, MPA는 새로운 요청이 있을 때마다 서버에서 이미 렌더링된 정적 리소스를 받아오기 때문에 렌더링 방식으로 자연스럽게 SSR을 사용하게 됩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/b9e45c64-95a9-4eb7-8125-047172fe3d92/image.png" class="img_ev3q"></p><p>CSR에 대해서 좀 더 자세히 알아보겠습니다.
유저가 웹사이트를 방문하면 서버는 빈 뼈대 HTML과 연결된 JS링크를 줍니다. 브라우저는 JS를 다운로드하고 실행합니다. 그리고 JS가 동적으로 DOM을 만들어서 브라우저에 띄워줍니다.</p><p>CSR은 JS가 동적으로 DOM을 만들기 때문에 초기 로딩 속도가 느립니다. 하지만 로딩이후에는 빠르게 동작한다는 장점이 있습니다.</p><p>유저가 컨텐츠를 보는 시간까지를 Time To View 즉, TTV 라고 하고 유저가 컨텐츠와 상호 작용을 할 수 있는 시간을 Time To Interact 즉 , TTI라고 하는데 CSR은 이 둘이 일치한다는 장점이 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/c391f9fe-ac90-4c90-8a04-7b335a0925ac/image.png" class="img_ev3q"></p><p>다음으로 SSR에 대해서 자세히 알아보도록 하겠습니다.
우선 웹사이트에 방문하면 서버는 렌더링 준비를 마친 HTML을 줍니다. 브라우저는 HTML을 렌더링하고, JS를 다운로드한 후 연결합니다. 이는 초기 로딩 속도가 매우 빠르다는 장점이 있습니다. 하지만 이 시점에는 사용자가 버튼을 클릭하거나 이동하려고 해도 아무 반응이 없을 수 있습니다. 인터렉션 가능한 페이지처럼 보이지만 실제로는 내용과 스타일이 입혀진 껍데기에 불과하고 JS로직이 모두 연결될 때까지 사용자의 입력에 응답할 수 없기 때문입니다. 그래서 SSR페이지는 TTV와 TTI가 다르다는 특징이 있습니다. 또한 SSR은 SEO(Search Engine Optimization), 즉 검색엔진 최적화에 유리합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/e7bb4623-16a4-4c3c-8fe5-4b793387bd43/image.png" class="img_ev3q"></p><p>이제 브라우저에 대해서 이야기를 해보도록 하겠습니다.
브라우저의 주요 기능은 사용자가 요청한 자원을 서버에 요청하고 브라우저에 표시하는 것 입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/6bef5b7a-90b3-43dd-b90b-00e92fac1095/image.png" class="img_ev3q"></p><p>브라우저에 대해서 이해하기 위해 브라우저가 어떻게 구성되어있는가 살펴보겠습니다.
우선 유저인터페이스는 주소표시줄이나, 이전/다음버튼, 새로고침 버튼등 유저가 상호작용할 수 있는 부분들을 의미합니다.</p><p>렌더링엔진은 요청한 콘텐츠, 즉 HTML이나 CSS를 파싱하여 화면에 표시하는 역할을 하고, 브라우저 엔진은 유저인터페이스와 렌더링 엔진 사이의 동작을 제어하는 역할을 합니다.
Networking은 HTTP요청과 같은 네트워크 호출에 사용되고,
JavaScript Interpreter는 자바스크립트 코드를 해석하고 실행합니다. 대표적으로 크롬의 V8엔진을 예로 들 수 있습니다.
Display Backend 는 기본적인 위젯을 그리는 역할을 하고, Data Persistance는 Local Storage나 쿠키등 클라이언트 사이드에서 데이터를 저장하는영역을 의미합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/a9d6bd11-cfca-4606-a2fb-8054e0671b60/image.png" class="img_ev3q"></p><p>작업관리자나 활성 상태보기를 했을 때 이렇게 크롬의 프로세스가 많이 떠있는 것을 보신적이 있으신가요?
크롬창을 여러개 띄우면 왜 이렇게 많은 프로세스들이 실행되는 것인지 방금 살펴본 브라우저의 구조를 중심으로 알아보도록 하겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/7203878e-d546-4e93-82e8-5fdacaac8ab7/image.png" class="img_ev3q"></p><p>브라우저도 프로그램이기 때문에 실행시키면 프로세스가 생성됩니다.
프로세스는 컴퓨터 프로그램의 인스턴스입니다.
스레드는 프로세스 내부에 있으며 프로세스로 실행되는 프로그램의 일부를 실행합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/d9a350bd-31bc-4a0b-95d1-2149135f8e5f/image.png" class="img_ev3q"></p><p>프로세스는 여러 작업을 수행하기 위해 운영체제에 다른 프로세스를 실행하라고 요청할 수 있습니다. 그러면 메모리의 다른 부분에 새 프로세스가 할당됩니다.
두 프로세스가 서로 정보를 공유해야 할 때는 IPC 즉, 프로세스 간 통신를 사용합니다. 많은 애플리케이션이 이러한 방식으로 작동하도록 설계되어 있다. 그래서 작업 프로세스가 응답하지 않을 때 애플리케이션의 다른 부분을 실행하는 프로세스를 중지하지 않고도 응답하지 않는 프로세스를 다시 시작할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/bc058cfe-e5f7-430c-8bda-522cb97de790/image.png" class="img_ev3q"></p><p>브라우저는 프로세스와 스레드를 어떻게 사용할까요?</p><p>프로세스를 한개만들고 여러개의 스레드를 사용할 수도 있고, 프로세스를 여러개 만들고 그안에 스레드를 조금만 만들어 IPC로 통신할 수도 있습니다.
왼쪽그림은 브라우저 프로세스 한개에 스레드가 여러개 있는 브라우저 구조이고, 오른쪽 그림은 프로세스 여러개를 사용하는 브라우저 구조입니다.</p><p>여기에서 주목해야 할 중요한 점은 브라우저마다 이를 다르게 구현할 수 있다는 점 입니다.</p><p>브라우저를 만드는 방법에 대한 표준은 없고, 브라우저마다 접근 방식이 완전히 다를 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/62f95736-13e8-43dd-9d24-ed38f1680114/image.png" class="img_ev3q"></p><p>그렇다면 크롬은 어떨까요?
크롬은 다중 프로세스 아키텍처입니다.
탭마다 프로세스를 할당하는 방법을 process per tab이라고 하고, 사이트마다 프로세스를 할당하는 방법을 process per site 라고 하는데 크롬은 아래 링크에서 이를 설정할 수 있도록 해놨습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/e8b43259-42ef-4511-9fae-3c5e7356b61b/image.png" class="img_ev3q"></p><p>브라우저에서 제일 위에 있는 브라우저 프로세스는 어플리케이션의 각 부분을 맡고 있는 프로세스를 조정합니다. 또한 렌더러 프로세스는 여러개 만들어져서 각 탭마다 할당됩니다.</p><p>이제 브라우저의 렌더러 프로세스가 HTML, CSS, JavaScript를 화면에 어떻게 그리는가에 대해서 알아보겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/84704b0a-22d4-4708-bd9c-06c5fee9a4e4/image.png" class="img_ev3q"></p><p>첫번째로 렌더러 프로세스는 우선 서버로 부터 전송받은 HTML을 파싱해서 DOM Tree를 구축합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/89b50d0e-afc0-4faf-afd9-42491575b489/image.png" class="img_ev3q"></p><p>두번째로는 CSS를 파싱해서 CSS Object Model 트리를 구축합니다.</p><p>CSS는 렌더링을 할 때 반드시 필요한 리소스이기 때문에 render blocking resource 입니다.
렌더링을 막기 때문에 브라우저는 빠르게 CSS를 다운로드하는 것이 좋습니다.
따라서 HTML의 head태그 안에서 정의하여 빠르게 리소스를 받을 수 있도록 해야 합니다. (CSS는 브라우저에 캐시 처리 가능)</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/c17631c9-9dfc-42df-97fd-6313665d7884/image.png" class="img_ev3q"></p><p>세번째로 DOM트리와 CSSOM트리를 합쳐서 Render Tree를 구성합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/0a34e93b-4e3e-4bb6-abe4-4cbd97445167/image.png" class="img_ev3q"></p><p>다음으로 레이아웃입니다.
기기의 뷰포트 내에서 렌더 트리의 노드가 정확한 위치와 크기를 계산하는 과정을 말합니다.
모든 상대적인 측정값은 화면에서 절대적인 픽셀로 변환되서 각 노드들이 어디에 배치되어야 할지 계산합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/21ce463f-4fc4-482d-9d7b-9c21c7a7e8b9/image.png" class="img_ev3q"></p><p>렌더 트리의 각 노드를 화면의 실제 픽셀로 나타내는 과정을 Painting라고 합니다.
Painting 과정 후 브라우저 화면에 UI가 나타나게 됩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/cfb6fd93-5a9e-45e3-b320-1587dd51c5a2/image.png" class="img_ev3q"></p><p>마지막으로 정리하고 마치도록 하겠습니다.</p><p>브라우저의 Renderer 프로세스에 의해 실행되는 브라우저가 화면에 HTML, CSS, JavaScript 를 그리는 과정을 Critical Rendering Path, 즉 CRP 라고 합니다.</p><p>첫번째로 HTML을 파싱해서 Document Object Model 트리를 만들고 CSS를 파싱해서 CSS Object Model 트리를 만듭니다.
이 둘을 결합해서 렌더트리를 만들고 이 렌더 트리를 어디다 배치할지 계산하는 과정 Layout 과정을 거치고, 마지막으로 화면에 그리는 Paint과정을 거쳐서 사용자에게 화면을 보여줍니다. (Layout이 다시 진행되는 것을 Reflow, Paint가 다시 진행되는 것을 RePaint라고 합니다.)</p><p>이렇게 웹의 역사 및 브라우저, 그리고 CRP에 대해 알아봤습니다.</p><p>이 발표가 웹을 더 깊이있게 이해하는데 도움이 되었으면 좋겠습니다.</p><p>감사합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/b5581b79-824d-449b-8cb5-11ba6864d416/image.png" class="img_ev3q"></p>]]></content>
        <author>
            <name>이현진</name>
            <uri>https://github.com/hyunjinee</uri>
        </author>
        <category label="WEB" term="WEB"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[CacheStorage API 사용하기]]></title>
        <id>use-cache-storage-api</id>
        <link href="https://team-yaza.github.io/blog/use-cache-storage-api"/>
        <updated>2022-07-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[본 포스팅은 아래 링크의 만들면서 배우는 프로그레시브 웹 앱 책을 보며 공부한 내용을 스스로 정리한 것 입니다.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/d41e3773-1274-46d1-87ff-7b0181abb749/image.png" class="img_ev3q"></p><p>본 포스팅은 아래 링크의 <strong>만들면서 배우는 프로그레시브 웹 앱</strong> 책을 보며 공부한 내용을 스스로 정리한 것 입니다.</p><p><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=190254386" target="_blank" rel="noopener noreferrer">만들면서 배우는 프로그레시브 웹 앱</a></p><p>이번 포스팅부터 사용할 실습 코드는 포스팅 맨 아래 링크에 첨부해두었습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="0-오프라인-페이지-개선하기">0. 오프라인 페이지 개선하기<a class="hash-link" href="#0-오프라인-페이지-개선하기" title="Direct link to heading">​</a></h2><p>이전 포스팅에서는 오프라인 상태를 감지하면 HTML 형식의 응답을 주도록 구현을 해보았다.</p><p>오프라인 화면을 좀 더 개선하기 위해 HTML 형식의 응답이 아닌 이미지와 스타일 시트가 포함된 HTML 파일을 넘겨주고 싶다면 어떻게 하면될까?</p><p>다음 코드를 함께 살펴보자</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> function </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">requst</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">function </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/index-offline.html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>오프라인 상태를 감지하면 <code>index-offline.html</code> 을 넘겨주는 코드이다.</p><p>다만, 여기에서는 무언가 이상한게 있는데, 오프라인 상태인데 <code>index-offline.html</code> 를 어떻게 알고 요청을 받아서 넘겨주는 것일까?</p><p>사용자가 온라인 일때 <code>index-offline.html</code> 파일을 받아놓았다 하더라도 어디에 이 파일이 저장되어있다가 오프라인일때 제공을 해줄 수 있는 것일까?</p><p>그 해답은 <code>CacheStorage API</code>에 있다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-파일-캐시하기">1. 파일 캐시하기<a class="hash-link" href="#1-파일-캐시하기" title="Direct link to heading">​</a></h2><p>파일을 캐시하는 과정을 살펴보자.</p><p>오프라인 버전의 파일을 가져오기 위해서는 당연한 이야기지만 사용자가 온라인 일때 해당 파일도 같이 받아와야 한다.</p><p>서비스 워커의 <code>Life Cycle</code> 은 다음과 같다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/f338dd14-8faf-4555-8286-3440be11916e/image.png" class="img_ev3q"></p><p>앞서 만들어본 서비스 워커에서는 활성화된 서비스 워커에 의해서 잡히는 이벤트(fetch)를 받는 데 사용했다.</p><p>하지만 지금 하려고 하는것은 활성화 된 서비스 워커에서 해야하는 일이 아니다. 활성화 되기 전에 오프라인 환경에서 사용할 파일을 캐싱해야한다.</p><p>서비스 워커의 <code>install 이벤트</code>는 서비스 워커가 가장 처음 등록된 직후, 그리고 이벤트가 활성화 되기 전에 단 한번만 발생하는 이벤트이다. 서비스 워커가 페이지를 제어하고 fetch 이벤트 수신을 시작하기 전에, 오프라인 화 가능한 모든 파일을 캐싱 할 기회를 얻을 수 있다.</p><p><code>git checkout ch03-start</code> 명령을 사용하여 실습 환경 세팅을 하고 serviceworker.js 코드를 아래와 같이 고쳐보자.</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"install"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> function </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">waitUntil</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"c"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">function </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">add</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/index-offline.html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 코드의 <code>install 이벤트</code>는 설치 단계에서 새로운 서비스 워커가 등록된 <strong>직후</strong> 호출된다.</p><p>서비스 워커가 성공적으로 설치가 진행되고 새 서비스 워커가 활성화 되었다고 말하기 전에 성공적으로 캐싱을 해야 한다. 파일을 가져와 캐시에 저장하는 일이 비동기적으로 일어나기 때문에, 비동기 이벤트가 완료될 때까지 이벤트를 연기해야한다.</p><p><code>waitUntil</code> 은 전달된 프로미스가 <code>resolve</code>될 때까지 이벤트의 수명을 연장한다.</p><p>당연하게도 <code>activate</code> 상태에서 <code>waitUntil</code>을 사용하여 캐시하여도 일단은 서비스 워커가 활성화 완료되기 전이기에 캐시는 정상적으로 된다. 하지만 그렇게 구현하는 경우 캐시가 정상적으로 되지 않을때 서비스 워커의 install 자체를 취소해야하는 경우가 생길 수 있는데 이러한 경우 이미 install이 끝나서 취소를 할 수 없기에 <code>install 이벤트</code>에서 <code>waitUntil</code>을 해주는 것이 좋다.</p><p><code>caches</code>를 불러올때 <code>“c”</code>라는 캐시명을 전달해주었다.</p><p>이렇게 해준 이후 오프라인을 활성화 하고 새로고침을 눌러보자.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/1c302b87-aa84-4b21-805a-702784ef5670/image.png" class="img_ev3q"></p><p>캐시된 파일이 안불러와지고 오프라인 공룡이 뜬다.</p><p>당연하다. 캐시만 했을뿐 오프라인이 감지 되었을때 캐시된 데이터를 불러오라는 로직은 없기 때문이다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-cachestorage로부터-요청-받아오기">2. CacheStorage로부터 요청 받아오기<a class="hash-link" href="#2-cachestorage로부터-요청-받아오기" title="Direct link to heading">​</a></h2><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> function </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">function </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/index-offline.html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>오프라인이 감지된다면 캐시 된 데이터 중 <code>cache.match</code> 를 사용하여 <code>CacheStorage</code>에서 파일을 반환받는다.</p><p>캐시에 <code>index-offline.html</code>이 있는지는 확인하지 않아도 된다.</p><p>앞선 로직은 성공적으로 캐시가 되야만 서비스 워커가 install되는 로직이기 때문이다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/53ba7be0-2654-43bf-937d-2c4e8fe8b546/image.png" class="img_ev3q"></p><p>실행 화면을 보니 html 파일은 잘 캐싱이 된 듯 하지만 html 파일 내부에서 불러오는 다른 파일들은 캐싱이 전혀 안 되지 않은 듯 하다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-여러개-캐싱하고-올바른-응답-매칭하기">3. 여러개 캐싱하고 올바른 응답 매칭하기<a class="hash-link" href="#3-여러개-캐싱하고-올바른-응답-매칭하기" title="Direct link to heading">​</a></h2><p>일단 필요한 파일을 전부 캐싱을 해보자.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"install"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">waitUntil</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"gih-cache"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">add</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/index-offline.html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">add</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token string" style="color:rgb(255, 121, 198)">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">add</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/css/gih-offline.css"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">add</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/img/jumbo-background-sm.jpg"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">add</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/img/logo-header.png"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위와 같은 코드로 작성해도 되지만 실은 너무 못생겼다…</p><p>하나씩 <code>add</code> 해주지 말고 <code>addAll 함수</code>를 사용하여 한번에 캐싱해주도록 하자.</p><p><code>addAll</code>은 하나의 URL대신 모든 URL을 배열로 가져와 캐시에 저장하는데 요청이 실패할 경우 <code>reject</code> 된다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_NAME</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"gih-cache"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_URLS</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/index-offline.html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/css/gih-offline.css"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/img/jumbo-background-sm.jpg"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"/img/logo-header.png"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"install"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">waitUntil</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_NAME</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addAll</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">CACHE_URLS</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>allAll</code> 함수를 사용하니 확실히 코드가 깔끔하게 바뀐 모습이다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/d3b88643-dfb4-482b-b26f-5a2e081d3c90/image.png" class="img_ev3q"></p><p>하지만 이 상태로 실행해도 이전과 결과가 똑같이 나오는데, 이것도 당연하다.</p><p>추가적으로 캐싱만 해줬을 뿐 응답하는 로직은 안바꿔줬기 때문이다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">headers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">get</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"accept"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">includes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"text/html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> caches</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/index-offline.html"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>코드를 보면 만약 오프라인 이면 (<code>request fetch</code> 과정에서 실패하여 <code>catch</code>로 넘어오면) 캐시에서 해당 <code>request</code>가 캐시에 있는지 <code>match</code>를 해서 있다면 응답을 그대로 리턴해준다.</p><p>그런데 여기에서 조금 이상한 점은 <code>match</code>를 해준 다음 캐시되었는지 아닌지를 찾을때 <code>catch</code>로 찾는게 아닌 <code>then</code>에서 예외를 처리해주고 있는데, 그 이유는 <code>cache.match</code>는 찾지 못하면 프로미스를 <code>reject</code> 하는게 아니라 <code>undefined</code>를 반환하고, 절때 <code>reject</code>되지 않기때문이다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/54778996-ddb4-4b7a-9d44-bc1fc98aebe9/image.png" class="img_ev3q"></p><p>이렇게까지 응답을 매칭해준 이후에야 이쁘게 오프라인 화면이 잘 보이는 모습이다.</p><blockquote><p>다음 포스팅은 서비스 워커의 자세한 Life Cycle과 캐시 관리에 대해 공부해볼 예정입니다.</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-link">4. Link<a class="hash-link" href="#4-link" title="Direct link to heading">​</a></h2><p><a href="https://github.com/TalAter/gotham_imperial_hotel" target="_blank" rel="noopener noreferrer">실습 코드 링크</a></p>]]></content>
        <author>
            <name>유찬희</name>
            <uri>https://github.com/HanCiHu</uri>
        </author>
        <category label="PWA" term="PWA"/>
        <category label="Service Worker" term="Service Worker"/>
        <category label="Cache Storage API" term="Cache Storage API"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[서비스워커 사용해보기]]></title>
        <id>use-service-worker</id>
        <link href="https://team-yaza.github.io/blog/use-service-worker"/>
        <updated>2022-07-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[본 포스팅은 아래 링크의 만들면서 배우는 프로그레시브 웹 앱 책을 보며 공부한 내용을 스스로 정리한 것 입니다.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/d41e3773-1274-46d1-87ff-7b0181abb749/image.png" class="img_ev3q"></p><p>본 포스팅은 아래 링크의 <strong>만들면서 배우는 프로그레시브 웹 앱</strong> 책을 보며 공부한 내용을 스스로 정리한 것 입니다.</p><p><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=190254386" target="_blank" rel="noopener noreferrer">만들면서 배우는 프로그레시브 웹 앱</a></p><p>이번 포스팅부터 사용할 실습 코드는 포스팅 맨 아래 링크에 첨부해두었습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-서비스-워커-만들기">1. 서비스 워커 만들기<a class="hash-link" href="#1-서비스-워커-만들기" title="Direct link to heading">​</a></h2><p><code>git checkout origin/ch02-start</code> 명령으로 첫번째 실습을 진행해보자.</p><p><code>ch02-start</code> 브랜치로 이동했다면 app.js 파일의 맨 위에 다음과 같은 코드를 넣어보자.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"serviceWorker"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">navigator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">navigator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">serviceWorker</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">register</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/sw.js"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">registration</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Service Worker registered with scope:"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> registration</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">scope</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">err</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Service Worker registration failed"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>먼저 브라우저가 서비스워커를 지원하는지 확인해야한다.</p><p>브라우저가 서비스워커를 지원한다면 <code>navigator.serviceWorker.register</code>를 호출하여 서비스 워커를 등록한다.</p><p><code>navigator.serviceWorker.register</code> 는 두개의 인자를 받는 함수인데 첫 번째 인자는 서비스 워커 스크립트의 URL이고, 두번째는 option 객체이다.</p><p>여기에서는 <code>option 객체</code>에 대해서는 자세히 다루지 않고 나중에 다룰 예정이다.</p><p>이상태로 실행하면 다음과 같은 오류가 발생하게 되는데, 당연하다. <code>public 폴더</code>에 <code>sw.js</code>라는 파일이 없기때문이다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/3640da62-ece5-4c8c-8cfe-a6f8bca8bc36/image.png" class="img_ev3q"></p><p>public 폴더 안에 <code>sw.js</code> 파일을 추가해주기만 해도 등록은 되는것을 확인 할 수 있다.</p><p><code>sw.js</code>에 다음과 같은 코드를 추가해보고 웹페이지를 새로고침해보자.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Fetch request for: "</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/1dddd78c-e12d-4371-962b-bd5536702193/image.png" class="img_ev3q"></p><p>위 사진처럼 fetch된 모든 데이터가 console에 찍히는 것을 확인 할 수 있다.</p><p>이건 웹 사이트에서 요청되는 모든 fetch 요청을 중간에 가로채서 분석하고 조작할 수 있다는 것을 의미한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-웹에서-콘텐츠-가져오기">2. 웹에서 콘텐츠 가져오기<a class="hash-link" href="#2-웹에서-콘텐츠-가져오기" title="Direct link to heading">​</a></h2><p>sw.js의 코드를 다음과 같이 고치고 웹페이지를 새로고침 해보자.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">includes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/img/logo.png"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/img/logo-flipped.png"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/91a65ada-ea5a-44db-8b55-e6e9337cbd12/image.png" class="img_ev3q"></p><p>들어오는 fetch 요청 중 <code>img/logo.png</code>인 요청을 가로채서 대신 <code>/img/logo-flipped.png</code> 를 fetch로 reponse를 생성하고 respondWith 메소드를 사용하여 원래 request 이벤트에 응답한다.</p><p>용어를 어렵게 적어놨지만 요약하자면 서비스워커는 로고 요청을 기다리고 있다가 요청이 오면 다른 로고를 대신 응답한다는 것이다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-오프라인-요청-감지하기">3. 오프라인 요청 감지하기<a class="hash-link" href="#3-오프라인-요청-감지하기" title="Direct link to heading">​</a></h2><p>앞선 포스팅에서는 PWA는 오프라인을 지원한다고 하였는데 서비스 워커는 오프라인을 어떻게 감지하는것일까?</p><p>다음코드를 함께 보자.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"hello world !\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>respondWith</code>안에 <code>fetch(event.request)</code>가 있다. 즉, 모든 fetch 요청에 대해 그대로 요청을 보내주고 있는 것이다.</p><p>다만 그대로 보내주는 요청에서 예외가 발생하는 경우 catch로 받아서 새로운 응답을 보내주는 방식으로 오프라인을 감지하게 된다.</p><p>오프라인이면 fetch 요청에서 당연히 예외가 발생할 수 밖에 없기 때문이다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/bb879676-dd9b-4d5a-a620-dbc88c076f22/image.png" class="img_ev3q"></p><p>위 그림처럼 결과가 나오게 된다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-오프라인-상태에서-html-response-보내기">4. 오프라인 상태에서 HTML Response 보내기<a class="hash-link" href="#4-오프라인-상태에서-html-response-보내기" title="Direct link to heading">​</a></h2><p>오프라인 상태에서 크롬기준 이상한 공룡 친구가 안나오는것 까지는 좋은데 hello world! 는 좀 심한것 같다.</p><p>예쁘게 고쳐주도록 하자.</p><p>위 코드를 아래처럼 고쳐주자.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> responseContent </span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;html&gt;"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;body&gt;"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;style&gt;"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"body {text-align: center; background-color: #333; color: #eee;}"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;/style&gt;"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;h1&gt;Gotham Imperial Hotel&lt;/h1&gt;"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;p&gt;There seems to be a problem with your connection.&lt;/p&gt;"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;p&gt;Come visit us at 1 Imperial Plaza, Gotham City for free WiFi.&lt;/p&gt;"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;/body&gt;"</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"&lt;/html&gt;"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">respondWith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">responseContent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">headers</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text/html"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/8708f3fe-f53b-45a1-bb98-62afe6d87a0b/image.png" class="img_ev3q"></p><p>responseContent로 정의한 문자열에 headers를 html type으로 정의하여 보내준 모습이다.</p><p>텍스트 데이터를 렌더링해주는게 아니라 HTML을 렌더링 해주도록 고쳐주었다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-서비스-워커의-scope">5. 서비스 워커의 Scope<a class="hash-link" href="#5-서비스-워커의-scope" title="Direct link to heading">​</a></h2><p>현재는 서비스 워커를 프로젝트의 root 폴더에 저장해주어서 모든 요청을 다 거쳐서 들어오도록 했지만 실은 서비스 워커는 서비스 워커 파일의 위치에 따라 그리고 <code>navigator.serviceWorker.register</code> 에서 지정해준 Scope 옵션에 따라 요청의 범위를 조정할 수 있다.</p><p>예를 들어 <code>navigator.serviceWorker.register("sw.js", {scope: "/js"})</code> 는 <code>/js</code> 폴더에서 발생한 요청에 대해서만 제어가 가능하다.</p><p><code>navigator.serviceWorker.register("/js/sw.js")</code> 는 js 폴더 내부를 대상으로 하는 요청만 해당 서비스 워커로 전달이 된다.</p><p>js 폴더 안에 아래와 같은 코드로 <code>sw.js</code> 파일을 만들고, 루트 디렉토리의 <code>index.html</code>을 js 폴더 안에도 복사해주었다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"fetch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">request</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/0162ae42-4c67-4803-9a06-d32b9f48663b/image.png" class="img_ev3q"></p><p>이후 <code>app.js</code>에 아래와 같은 코드를 추가하여 <code>js/sw.js</code>를 서비스워커에 등록하였다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">navigator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">serviceWorker</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">register</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"/js/sw.js"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">registration</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token string" style="color:rgb(255, 121, 198)">"in js dir Service Worker registered with scope:"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      registration</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">scope</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">err</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Service Worker registration failed"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>그 결과</strong></p><p>루트 디렉토리의 <code>index.html</code>은 콘솔에 서비스워커가 등록되었다는 콘솔만 뜨지만</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/f366e611-b78b-44f8-8d3d-a48a30d6de9c/image.png" class="img_ev3q"></p><p>/js/index.html로 들어가보면?</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/86d38ace-c137-4964-81cf-1b0acf4b95aa/image.png" class="img_ev3q"></p><p><code>/js/sw.js</code>에 적어둔대로 fetch요청이 모두 콘솔에 찍히고 있다…!!</p><p>모든 fetch 요청이 서비스 워커를 지나게 구현하면 뭔가 문제가 생길 것 같다고 생각했는데 scope를 적극적으로 활용하여 서비스 워커를 적재적소에 맞게 설정해주면 좋을 것 같다는 생각이 들었다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-link">6. Link<a class="hash-link" href="#6-link" title="Direct link to heading">​</a></h2><p><a href="https://github.com/TalAter/gotham_imperial_hotel" target="_blank" rel="noopener noreferrer">실습 코드 링크</a></p>]]></content>
        <author>
            <name>유찬희</name>
            <uri>https://github.com/HanCiHu</uri>
        </author>
        <category label="PWA" term="PWA"/>
        <category label="Service Worker" term="Service Worker"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PWA(Progressive Web App)란 무엇인가?]]></title>
        <id>What-is-PWA</id>
        <link href="https://team-yaza.github.io/blog/What-is-PWA"/>
        <updated>2022-07-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[본 포스팅은 아래 링크의 만들면서 배우는 프로그레시브 웹 앱 책을 보며 공부한 내용을 스스로 정리한 것 입니다.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://velog.velcdn.com/images/hancihu/post/d41e3773-1274-46d1-87ff-7b0181abb749/image.png" class="img_ev3q"></p><p>본 포스팅은 아래 링크의 <strong>만들면서 배우는 프로그레시브 웹 앱</strong> 책을 보며 공부한 내용을 스스로 정리한 것 입니다.</p><p><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=190254386" target="_blank" rel="noopener noreferrer">만들면서 배우는 프로그레시브 웹 앱</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-pwa란">1. PWA란?<a class="hash-link" href="#1-pwa란" title="Direct link to heading">​</a></h2><p>PWA는 네이티브 앱의 장점과 웹의 낮은 진입 장벽이라는 두 가지 장점을 모두 지닌 새로운 종류의 웹 앱이다.</p><p>PWA는 단순한 웹사이트로 시작하여 사용자의 사용범위에 따라 기존 네이티브 앱과 비슷하게 발전한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-why-pwa-">2. Why PWA ?<a class="hash-link" href="#2-why-pwa-" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="시장성-측면">시장성 측면<a class="hash-link" href="#시장성-측면" title="Direct link to heading">​</a></h3><p>2016년 콤스코어의 보고서에 따르면 일반 사용자는 모바일 기기 사용 시간의 84%를 가장 유명한 앱 5개를 사용하는데 쓰고있다.</p><p>태블릿 기기에서는 사용시간의 95%가 상위 5개 앱에 해당되었다.</p><p>반면, 500만 명 이상의 사용자가 사용하는 모바일 웹 사이트 수는 600개에 달하며 비슷한 수의 사용자가 사용하는 네이티브 앱의 수보다 거의 4.5배 많다.</p><p>상위 1000개의 모바일 웹 사이트 잠재 고객은 상위 1000개의 네이티브 앱의 잠재 고객보다 3배 이상 많으며, 성장 속도도 네이티브 앱보다 2배 빠르다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="접근성-측면">접근성 측면<a class="hash-link" href="#접근성-측면" title="Direct link to heading">​</a></h3><p>사용자가 앱을 설치하는 과정을 살펴보자, 먼저 광고나 웹사이트에서 앱을 발견한 후(또는 앱스토어에서 검색을 한 후)에 앱 스토어에 들어가서 설치 버튼을 누르고, 앱마다 다른 권한 항목을 확인하고 권한부여에 동의한다.</p><p>앱을 다운로드 받고 설치가 되기를 기다린 후에 설치가 완료되면 그제서야 앱을 실행한다.</p><p>이러한 과정은 연구에 따르면 각 과정마다 평균적으로 20%의 사용자가 이탈한다.</p><p>배너 광고를 보고 최종적으로 앱을 실행하는 사용자는 배너 광고를 클릭한 전체 사용자의 20% 조차 안된다.</p><p>위 내용처럼 사용자가 휴대폰에 앱을 설치하도록 유도하는 것은 비용이 너무 많이 들게된다.</p><p>다만, 일단 한번 앱을 설치하고 나면 전통적인 웹사이트보다 앱은 훨씬 더 오래 살아남고, 훨씬 더 오래 사용자의 주의를 끌 수 있기에 개발자는 이러한 비용을 투자해서라도 사용자가 앱을 설치하기를 원한다.</p><p>하지만 이러한 설치 과정이 없이 웹사이트에서 바로 앱을 설치할 수 있다면, 웹이지만 위에서 언급한 앱의 장점을 가지고 있다면 네이티브 앱을 고집 할 이유가 없어진다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-pwa-의-장점">3. PWA 의 장점<a class="hash-link" href="#3-pwa-의-장점" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="연결-상태와는-무관한-가용성오프라인-지원">연결 상태와는 무관한 가용성(오프라인 지원)<a class="hash-link" href="#연결-상태와는-무관한-가용성오프라인-지원" title="Direct link to heading">​</a></h3><p>PWA에서는 전통적인 웹사이트와 달리 사용자의 인터넷 연결 여부가 중요하지 않다.</p><p>인터넷 연결이 되지 않았다면 그에 맞는 화면과 서비스를 제공하면 된다.</p><p>PWA에서는 <strong>서비스 워커</strong>를 사용하여 사용자의 연결 상태 변화를 감지하여 적절히 대응하는것이 가능하다.</p><p>구현하기에 따라 오프라인 상태에서 메시지 송신, 메일 회신, 게시물 댓글 달기 기능을 이용한 이후 온라인으로 상태가 바뀌면 사용자가 이미 웹 브라우저를 종료했더라도 작업이 정상적으로 완료되도록 할 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="빠른-로딩-시간">빠른 로딩 시간<a class="hash-link" href="#빠른-로딩-시간" title="Direct link to heading">​</a></h3><p>서비스 워커를 사용하면 초고속 인터넷이든, 연결이 불안정하든, 심지어는 아예 인터넷이 없더라도 바로 시작되는 웹 사이트를 만들 수 있다.</p><p>이전에 경험했던 전통적인 어떠한 웹사이트보다도 빠르게 로딩이 가능하다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="푸시push-알림">푸시(Push) 알림<a class="hash-link" href="#푸시push-알림" title="Direct link to heading">​</a></h3><p>PWA에서는 네이티브 앱과 마찬가지로 푸시 알림을 보낼수가 있다. 알림은 사용자의 재참여를 유도하고 다시 방문하게 만들 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="홈-화면-바로가기">홈 화면 바로가기<a class="hash-link" href="#홈-화면-바로가기" title="Direct link to heading">​</a></h3><p>네이티브 앱의 장점인 홈 화면에서 바로 앱에 접근할 수 있는 장점을 PWA에서 가져갈 수 있다. 홈 화면에 아이콘을 추가하면 사용자는 네이티브 앱과 PWA를 구분하기 어려워진다.</p><blockquote><p>다음 포스팅부터는 PWA를 직접 구성해보고 실습해보는 과정에 대해 포스팅 할 예정입니다.</p></blockquote>]]></content>
        <author>
            <name>유찬희</name>
            <uri>https://github.com/HanCiHu</uri>
        </author>
        <category label="PWA" term="PWA"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rendering Patterns]]></title>
        <id>rendering-patterns</id>
        <link href="https://team-yaza.github.io/blog/rendering-patterns"/>
        <updated>2022-07-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[발표 영상]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/6daef53b-f21a-40d7-9b31-7fee6c586662/image.png" class="img_ev3q"></p><p><a href="https://www.youtube.com/watch?v=baVuNEoMOr0" target="_blank" rel="noopener noreferrer">발표 영상</a></p><p>안녕하세요 소프트웨어 마에스트로 연수생 프론트엔드 개발자 이현진 입니다.
웹 페이지를 그리는 다양한 렌더링 방식 즉 Rendering Pattern들에 대해 이야기 해보겠습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/9fb837bd-c81c-44bd-bea3-eebba30d93b5/image.gif" class="img_ev3q"></p><p>렌더링은 브라우저 화면에 웹 페이지를 그리는 것을 말합니다. 먼저 유저가 브라우저를 통해 서버에 요청을 보내고, 서버는 이에 응답으로 HTML, CSS, JavaScript를 보내줍니다. 브라우저는 이를 해석하여 웹 페이지를 그립니다. (렌더링을 수행하는 브라우저의 프로세스를 렌더러 프로세스라고 합니다.)</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/1b858f59-55e1-47bb-a220-300e8a092a37/image.png" class="img_ev3q"></p><p>브라우저가 화면에 HTML, CSS, JavaScript를 그리는 과정(절차)를 <code>CRP</code>(Critical Rendering Path)라고 합니다.
이 과정은 우선 DOM Tree와 CSSOM Tree를 만들고, 이 둘을 결합하여 Render Tree를 만듭니다. 다음에는 Render Tree를 배치하는 Layout과정, 화면에 직접 그리는 Paint 과정을 따릅니다.
위 그림에서 DOM Tree 부터 Render Tree를 만들기까지를 <code>Construction</code> 과정, Layout과 Paint를 <code>Operation</code> 과정이라고 합니다.
<img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/4b3611a5-bd74-479e-ba94-26cce050f983/image.png" class="img_ev3q"></p><p><code>CRP</code>를 알아야하는 이유는 우리가 작성한 코드가 렌더링에 직접적으로 영향을 미치기 때문입니다.
예를 들어 특정 요소를 안보이게 처리하고 싶을 때 <code>display: none</code>을 사용한다면 Tree들을 만드는 <code>Construction</code> 과정부터 <code>Operation</code>과정까지 다시 진행하기 때문에 렌더링 과정에 있어서 비효율성을 초래합니다. 따라서 <code>opacity</code>나 <code>visibility</code>속성을 사용하는것이 더 효율적입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/0b75cbd1-8ae0-4cea-bb79-c724b1173cd8/image.png" class="img_ev3q"></p><p>이전 예시에서 알 수 있는 사실은 렌더링은 <code>UX</code>(User Experience)와 <code>DX</code>(Developer Experience)에 직접적으로 영향을 미친다는 것 입니다. 개발자가 작성하는 코드에 따라 렌더링의 속도가 달라질 수 있고 개발자는 어플리케이션의 첫 사용자(First User)이기도 하므로 <code>DX</code>에 영향을 미칩니다. 또한 개발자가 채택한 렌더링 패턴은 최초 유저인 개발자에게 영향을 미치고 이는 결국 <code>UX</code>에 영향을 미칩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/47798163-2b27-4fe8-89ec-b7f8b3aacf66/image.png" class="img_ev3q"></p><p>따라서 우리는 올바른 렌더링 방법을 채택하는 것이 중요합니다.
그렇다면 어떤 렌더링 패턴이 올바른 것 일까요? 또, 올바르다는 기준은 무엇일까요?</p><p>올바른 렌더링 패턴이란, 우리의 어플리케이션의 특성에 맞고, <code>UX</code>와 <code>DX</code>를 모두 높여주는 패턴을 말합니다.</p><p>어플리케이션을 만들 때 고려해야 할 요소는 검색엔진 최적화, Web Performance등이 있습니다. 검색엔진 최적화는 SSR(Server Side Rendering) 해결할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/56195331-4fb3-487b-b69d-543fde74dd3c/image.png" class="img_ev3q"></p><p>Web Performance에서 고려할 점은 구글에서 제안하는 웹 사용자 경험에 대한 지표인 Core Web Vitals입니다.</p><ul><li><code>TTFB</code>(Time To First Byte): 웹 페에지 컨텐츠의 첫 byte가 브라우저에 도달하는데 걸리는 시간</li><li><code>FCP</code>(First Contentful Paint): 초기 DOM 컨텐츠를 렌더링하는데 걸리는 시간</li><li><code>LCP</code>(Largest Contentful Paint): 가장 큰 컨텐츠(보통 중요한 컨텐츠일수록 크기가 큼)를 페이지에 렌더링하는데 걸리는 시간</li><li><code>TTI</code>(Time To Interactive): 컨텐츠와 상호작용까지의 시간(CSR에서는 TTV(Time To View)와 TTI가 같고 SSR에서는 TTV와 TTI가 다르다.)</li><li><code>CLS</code>(Cumulative Layout Shift): 누적 레이아웃 이동으로 사용자가 예상치 못한 레이아웃 이동을 경험하는 빈도를 수량화. 시각적 안정성을 측정할 때 중요한 사용자 중심 메트릭</li><li><code>FID</code>(First Input Delay): 사용자가 페이지와 처음 상호 작용할 때(버튼 클릭 등) 부터 해당 상호 작용에 대한 응답으로 브라우저가 실제로 이벤트 핸들러 처리를 시작하기까지의 시간을 측적하는 지표.</li></ul><p>이 Core Web Vitals는 '어떤 방식으로 렌더링을 하냐'에 따라 수치가 달라집니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/4466d59c-4613-4a1e-ae74-27148884700a/image.png" class="img_ev3q"></p><p>'어떤 방식으로 렌더링을 하냐'는 어떤 렌더링 패턴으로 페이지를 렌더링 할 것인가로 귀결됩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/bf2094d4-5ccf-4277-b4c3-287fdce99041/image.gif" class="img_ev3q"></p><p>Core Web Vitals를 기준으로 렌더링 패턴들의 특징을 알아보겠습니다.</p><p>CSR의 렌더링 과정은 먼저 유저의 요청에 의해 브라우저가 프론트엔드 서버로 HTML을 요청합니다. 서버는 빌드 타임에 미리 생성해 둔 HTML을 응답합니다. 이 HTML에는 로더나 skeleton UI가 들어 있습니다.</p><p>그 후에 head 태그에 정의된 CSS와 같은 렌더링 차단 리소스(다운로드되기 전까지 렌더링을 막음)를 다운 받는데, 보통 이런 리소스는 브라우저에 캐시 처리합니다.</p><p>다음으로 body 태그의 마지막 부분에 위치한 React앱이 들어있는 bundle을 프론트엔드 서버에 요청합니다. bundle을 body태그의 가장 아래에 위치시키는 이유는 자바스크립트는 문서를 파싱하다가 JavaScript를 만나면 파싱을 중지하고 JavaScript 엔진에게 권한을 넘겨서 JS를 실행하기 때문입니다.(Parse Blocking Resource)</p><p>React앱이 실행되면 이제 컨텐츠(데이터)를 받아오기 위해 API 서버로 요청을 보내고 응답을 받아서 유저에게 컨텐츠를 보여줍니다.</p><p>위 내용을 정리하면 유저는 아래와 같은 요청을 기다려야 합니다.</p><ol><li>HTML 파일을 요청해서 응답을 받고</li><li>JavaScript 번들을 요청해서 응답을 받고</li><li>번들을 실행하고</li><li>API 서버로 부터 응답을 받고 데이터를 렌더링</li></ol><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/3a8847a2-867a-4dd1-9c99-a360c040b486/image.png" class="img_ev3q"></p><p>CSR을 Core Web Vitals 관점으로 보겠습니다. 우선 오른쪽 아래에 표시된 파란색 표시는 브라우저에서 일어나는 과정을, 빨간색 표시는 서버에서 일어나는 과정을 뜻합니다. 또한 Network 부분과 Main Thread 부분을 나눴습니다.(Main Thread는 브라우저의 렌더러 프로세스의 Main Thread를 말합니다.)
유저가 HTML을 요청하고 서버가 이에 응답하여 브라우저에 컨텐츠의 첫 byte가 도달하는 순간을 TTFB라고 합니다. 이후에는 HTML을 파싱하고 body태그 맨 아래에 script 태그에 도달하면 bundle.js파일을 서버에서 받아오기 위해 요청을 보냅니다. 이 때 브라우저에서는 Operation과정이 수행되고 bundle을 가져오면 이제 JavaScript를 Evaluation하면서 다시 Operation을 실행합니다. 이 과정을 마치면 HTML에 JavaScript가 연결되어서 유저가 버튼을 클릭하면 연결된 로직이 수행됩니다.(TTI)</p><p>이제 서버로부터 데이터를 받아오기 위해 <code>/api/buildings</code>라는 엔드포인트에 요청을 보내고, 데이터를 받아옵니다. 데이터를 받아오면 브라우저는 바뀐 부분을 다시 그리는데 이 과정을 <code>hydration</code>이라고 합니다.</p><p><code>hydration</code>이 완료되는 시간이 <code>LCP</code>(Largest ContentFul Paint)를 의미합니다. LCP는 보통 페이지에서 중요한 요소를 로드하는데 까지 걸리는 시간인데 CSR에서는 상대적으로 느리다는 것을 알 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/551f4cca-8f6c-4b10-9f56-0a5df7de7ace/image.png" class="img_ev3q"></p><p><code>hydration</code>을 시각적으로 이해하기 위해 데모 페이지를 만들었습니다.</p><p><a href="https://rendering-patterns.vercel.app/" target="_blank" rel="noopener noreferrer">DEMO</a></p><p><code>hydrate</code>은 <code>수분을 공급하다</code>라는 뜻을 가지고 있습니다. 왼쪽 브라우저에는 skeleton UI가 있고 오른쪽 브라우저에는 빌딩 데이터가 채워져 있습니다.
즉<code>hydration</code>이란, API요청을 통해 데이터라는 수분을 페이지에 공급해주는 것 이라고 할 수 있습니다.</p><blockquote><p><strong>hydration</strong>
페이지가 브라우저에 로드되고 자바스크립트 코드가 실행되면서 페이지가 인터렉티브하게 동작하는 상태가 되는 과정</p></blockquote><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/5a1e5a80-e922-489e-a21e-6c9dd4035e12/image.png" class="img_ev3q"></p><p>다음으로 SSR(Server Side Rendering)입니다. 유저가 프론트엔스 서버에 HTML 파일을 요청하면 서버는 API 서버에 요청을 보내서 데이터를 받아와 컨텐츠를 채우고 완성된 HTML 파일을 클라이언트에게 보내줍니다.</p><p>기존 React앱이 실행된 후에 보내던 API 요청을 서버에서 미리 보내는 것 입니다. 따라서 유저는 한번의 요청만으로 보고 싶은 컨텐츠를 바로 보게 됩니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/6ebea75c-b7ff-4a76-a1b6-c6b3b4ebcd30/image.png" class="img_ev3q"></p><p>SSR을 Core Web Vitals 관점으로 보겠습니다. SSR이 이루어진 후 첫 바이트가 유저에게 도착하고, 유저에게 도착한 HTML은 컨텐츠를 포함하기 때문에 그 HTML을 렌더하는 순간 FCP(First Contentful Paint), LCP(Largest Contentful Paint)가 동시에 발생합니다. 마지막으로 JS를 로딩하면 유저가 인터렉션 가능한 페이지가 되므로 TTI는 마지막에 일어납니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/6ccbd3ba-d6b2-4d0f-b6fe-f06b15f97d4f/image.png" class="img_ev3q"></p><p>여러분의 컨텐츠가 빈번하게 바뀐다면 CSR과 SSR을 같이 활용할 수 있는데, SSR을 마친뒤에 <code>hydration</code>과정이 추가됩니다. <code>hydration</code> 과정에는 react-query나 swr같은 data-fetching 라이브러리를 주로 활용합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/80ab2b0b-af09-431a-8155-654b6f2e57da/image.png" class="img_ev3q"></p><p>React에서는 SSR을 구현하기위해 React 프레임워크인 Next.js를 사용합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/a1c6b341-29c5-4fe7-8649-535a69ea28e0/image.png" class="img_ev3q"></p><p>Next.js는 기본적으로 모든 페이지를 pre-render(미리 렌더링)합니다.
Client Side JavaScript가 페이지의 HTML을 다 그리는 것이 아니라 미리 각 페이지를 위한 HTML을 생성합니다.</p><p>각각 생성된 HTML 페이지에는 최소한의 자바스크립트가 연결되고 Client Side에서는 이 자바스크립트로 <code>hydration</code>과정이 일어납니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/d186b858-c6d7-474f-9f19-f0a9997c85d7/image.png" class="img_ev3q"></p><p>Next.js의 pre-rendering 형태는 <code>SSG</code>(Static Site Generation)과 <code>SSR</code>(Server Side Rendering)으로 나뉘며 각 페이지별로 다르게 적용할 수 있습니다.</p><p>예를 들어 Page A는 <code>SSG</code>로, Page B는 <code>SSR</code>로, Page C는 <code>CSR + SSR</code>로, Page D는 <code>CSR</code>로 렌더링 할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/10619935-1655-49d1-8c62-7a72a86b5666/image.png" class="img_ev3q"></p><p>Next.js의 pre-rendering 형태중 <code>SSG</code>에 대해서 먼저 알아보겠습니다. <code>SSG</code>는 빌드 타임에 HTML 페이지를 생성합니다.
데이터를 받아오는 API 요청 또한 빌드 타임에만 실행합니다. 따라서 API 서버의 부하가 줄어듭니다. 또한, 만들어진 컨텐츠를 CDN에 캐시함으로써 사용자에게 컨텐츠를 매우 빠르게 전달할 수 있습니다.
단점으로는 빌드 타임에 컨텐츠를 만들기 때문에 변하는 데이터에 취약합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/24ac7cbc-bd1c-4ba8-8552-6dc3ec2b1212/image.png" class="img_ev3q"></p><p><code>SSG</code>에 <code>CSR</code>을 곁들이면 변하지 않는 부분은 변하지 않게 고정하고, 유동적으로 데이터를 fetching 해야하는 부분은 <code>CSR</code>로 처리할 수 있습니다.(<code>hydration</code>) 또한, 두 렌더링 방식을 합쳤기 때문에 장점 또한 합쳐집니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/19d25656-0260-429c-ab6a-a8e6a1c7cae6/image.png" class="img_ev3q"></p><p><code>ISR</code>(Incremental Static ReGeneration)은 <code>SSG</code>에서 <code>revalidation</code> 옵션을 추가한 것 입니다. 빌드 타임에 HTML을 생성하는 것은 동일하나 일정 주기마다 데이터의 최신 여부를 검사해서 업데이트된 데이터로 페이지를 다시 생성합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/290f8f65-d32f-4888-86ec-a795a2e54e83/image.png" class="img_ev3q"></p><p>마찬가지로 <code>CSR</code>을 곁들이면 바뀌긴 하는데 자주 변하지 않는 데이터는 <code>ISR</code>의 렌더링 방법을, 동적으로 계속 바뀌는 데이터들은 <code>CSR</code>로 처리할 수 있습니다. 예를 들면 블로그 글(자주 안바뀜)과 댓글(자주 바뀜)을 이 방식으로 처리할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/96bbbcea-112b-41c2-8e22-00b5e45dc303/image.png" class="img_ev3q"></p><p>마찬가지로 <code>SSG</code> 또한 Core Web Vitals 관점으로 보겠습니다.
<code>SSG</code>로 만들어진 사이트이기 때문에 빌드 타임에 이미 HTML이 완성되어 있습니다. 따라서 서버에서는 마땅히 할 일이 없기 때문에 HTML을 바로 주고 클라이언트는 그 HTML을 바로 렌더링합니다. <code>CSR</code>을 곁들인다면 뒤에 <code>hydration</code> 과정이 추가되겠죠.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/5b077a22-99f9-4b18-8b22-492a6bd24fe3/image.png" class="img_ev3q"></p><p>다시 <code>SSR</code>입니다. <code>SSR</code>이야기를 다시 꺼낸 이유는 Next.js<code>SSR</code>의 Page단위 data fetching에 있습니다.</p><p><code>getServerSideProps</code>라는 함수는 API서버로부터 데이터를 가져온 후에 해당 데이터를 사용한 props를 리턴해주면 페이지 컴포넌트는 그 props를 바로 사용할 수 있습니다. 만약 <code>CSR</code>에서 <code>SSR</code>로 마이그레이션 한다고하면 기존 클라이언트 사이드의 data fetching 로직을 <code>getServerSideProps</code>로 옮기면 됩니다. 하지만 여러 컴포넌트에서 여러개의 데이터를 fetching 한다면 처리가 어려워집니다. 또한 props drilling을 하면 관심사의 분리가 되지 않으므로(위 예제에서 A컴포넌트는 data에 관심이 없음) 좋지 않은 해결 방법입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/917df990-ceae-4af1-bd6b-50a05aee1cdd/image.png" class="img_ev3q"></p><p>이를 해결하는 것이 RSC(React Server Component)입니다. RSC는 컴포넌트 개별 단위별로 서버에서 data fetching을 할 수 있으며 서버의 리소스에 자유롭게 접근할 수 있습니다. 또한 서버컴포넌트는 클라이언트로 전송되는 번들에 포함되지 않으며, 클라이언트의 상태를 유지하며 refetch할 수 있습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/13465e72-b67f-4818-925f-b7173b8fac4f/image.png" class="img_ev3q"></p><p>결국 이런 렌더링 패턴들을 알아야하는 이유는 렌더링 패턴이 UX와 DX에 직접적으로 연관이 있기 때문입니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/e6d10946-1df5-479a-a21d-129fb125ad8f/image.png" class="img_ev3q"></p><p>우리는 흔히 이런 개발 사이클을 돌곤 합니다. 엄청난 아이디어가 떠오르고, 개발을 한 후 배포를 합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/5c6b6ff7-3f4b-4d72-a544-dcdfa8cbcf32/image.png" class="img_ev3q"></p><p>그렇다면 이 과정에서 렌더링 패턴은 언제 고려되어야 할까요?</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/87c555cc-d884-4f23-8dab-b2e41398e76a/image.png" class="img_ev3q"></p><p>정답은 없습니다. 어디서든지 렌더링 패턴을 고려할 수 있지만, 어플리케이션이 어떤 컨텐츠를 렌더링하냐에 따라 적용할 패턴이 바뀔 것 같습니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/18e1c107-c172-44f5-a452-2aa5a7761a3f/image.png" class="img_ev3q"></p><p>저는 특정 패턴이 좋고 나쁘고를 주장하는 것이 아닙니다.
단지 웹을 렌더링하는 방법에는 다양한 렌더링 패턴이 존재하고, 이 패턴들은 모두 trade-off가 있을 뿐 입니다.</p><p>이 발표가 효율적인 렌더링 패턴을 찾는데 도움이 되었으면 좋겠습니다.</p><p>감사합니다.</p><p><img loading="lazy" src="https://velog.velcdn.com/images/hyunjine/post/e90d588d-8b1d-4d50-90f9-1c8ad6a50808/image.png" class="img_ev3q"></p><p><a href="https://github.com/hyunjinee/rendering-patterns" target="_blank" rel="noopener noreferrer">발표 REPO</a></p>]]></content>
        <author>
            <name>이현진</name>
            <uri>https://github.com/hyunjinee</uri>
        </author>
        <category label="React" term="React"/>
        <category label="Next" term="Next"/>
        <category label="MOZI" term="MOZI"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MOZI]]></title>
        <id>welcome</id>
        <link href="https://team-yaza.github.io/blog/welcome"/>
        <updated>2022-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요. 저희는 소프트웨어 마에스트로 13기 🌴 야간자율학습(야자)팀 입니다.]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요. 저희는 소프트웨어 마에스트로 13기 🌴 <a href="https://github.com/team-yaza" target="_blank" rel="noopener noreferrer">야간자율학습(야자)</a>팀 입니다.<br>
<!-- -->저희는 소프트웨어 마에스트로 본과정인 6월부터 팀으로 구성되어 함께 <code>MOZI</code>라는 서비스를 기획하고 개발했습니다.</p><p><img loading="lazy" alt="Docusaurus Plushie" src="/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p>]]></content>
        <author>
            <name>이현진</name>
            <uri>https://github.com/hyunjinee</uri>
        </author>
        <author>
            <name>유찬희</name>
            <uri>https://github.com/HanCiHu</uri>
        </author>
        <author>
            <name>김시온</name>
            <uri>https://github.com/sion-k</uri>
        </author>
        <category label="Software Maestro" term="Software Maestro"/>
        <category label="MOZI" term="MOZI"/>
        <category label="CNU" term="CNU"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MDX Blog Post]]></title>
        <id>mdx-blog-post</id>
        <link href="https://team-yaza.github.io/blog/mdx-blog-post"/>
        <updated>2021-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></summary>
        <content type="html"><![CDATA[<p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features" target="_blank" rel="noopener noreferrer">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer">MDX</a>.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>Use the power of React to create interactive blog posts.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&lt;</span><span class="token plain">button onClick</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">alert</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'button clicked!'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token maybe-class-name">Click</span><span class="token plain"> me</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">button</span><span class="token operator">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><button>Click me!</button></div></div>]]></content>
        <author>
            <name>Sébastien Lorber</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[First Blog Post]]></title>
        <id>first-blog-post</id>
        <link href="https://team-yaza.github.io/blog/first-blog-post"/>
        <updated>2019-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet]]></summary>
        <content type="html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content>
        <author>
            <name>Gao Wei</name>
            <uri>https://github.com/wgao19</uri>
        </author>
        <category label="hola" term="hola"/>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
</feed>